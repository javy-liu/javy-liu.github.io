<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Javy</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-26T06:40:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Javy Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vagrant 上手教程</title>
    <link href="http://yoursite.com/2015/08/24/vagrant/"/>
    <id>http://yoursite.com/2015/08/24/vagrant/</id>
    <published>2015-08-24T13:20:12.000Z</published>
    <updated>2016-08-26T06:40:48.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>这部分将会教你上手第一个Vagrant程序，同时让你了解Vagrant提供的大多数功能。如果你很好奇使用Vagrant能带来什么好处，你可以详细了解<a href="http://docs.vagrantup.com/v2/why-vagrant/" target="_blank" rel="external">为什么使用Vagrant？</a>这个上手教程将会使用<a href="https://www.virtualbox.org" target="_blank" rel="external">virtualbox</a>。请安装好它。</p>
<a id="more"></a>
<blockquote>
<p>有参考书籍吗？如果你喜欢实体书籍那么由Vagrant写作，由O’Reilly发版的<a href="http://www.amazon.com/gp/product/1449335837/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1449335837&amp;linkCode=as2&amp;tag=vagrant-20" target="_blank" rel="external">Vagrant: Up and Running</a>可以帮助你。</p>
</blockquote>
<h1 id="UP-和-RUNNING"><a href="#UP-和-RUNNING" class="headerlink" title="UP 和 RUNNING"></a>UP 和 RUNNING</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vagrant init hashicorp/precise32</div><div class="line">$ vagrant up</div></pre></td></tr></table></figure>
<p>当你运行完这两行命令，你会得到一个运行在VirtualBox上完整的Ubuntu 12.04 LTS 32-bit系统。你能使用SSH命令登录虚拟机<code>vagrant ssh</code>，你想删除这个虚拟机<code>vagrant destroy</code>。</p>
<p>现在想象一下，每个项目你都可以这样来创建，是不是很nice。</p>
<p>只用<code>vagrant up</code>，就能完成项目依赖安装，设置网络，并建立任何网络和同步文件夹，您可以继续在自己的机器的舒适性的工作。</p>
<p>教程的其余部分将引导你完成一个更完整的项目，涵盖了Vagrant的更多功能。</p>
<h1 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h1><p>设置Vagrant项目的第一步是创建<a href="http://docs.vagrantup.com/v2/vagrantfile/" target="_blank" rel="external">Vagrantfile</a>文件。创建Vagrantfile有两个目的：</p>
<ul>
<li>1.识别项目的根目录，项目根目录中会包含很多配置。</li>
<li>2.描述你需要哪种虚拟机以及你项目需要的资源，包括需要安装什么软件，什么用户可以访问等。</li>
</ul>
<p>Vagrant可以使用命令<code>vagrant init</code>来初始化目录。为了完成下面的练习，在你的终端使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir vagrant_getting_started</div><div class="line">$ cd vagrant_getting_started</div><div class="line">$ vagrant init</div></pre></td></tr></table></figure>
<p>它会当前目录给你创建一个<code>Vagrantfile</code>文件。你可以看看Vagrant这个文件，里面有很多注释，方便你理解配置。不要被这些配置吓到，我们已经配置足够你使用了。</p>
<p>你同样可以使用<code>vagrant init</code>来再次初始化当前目录，即使这个目录已经存在项目。</p>
<p>在你的项目中，如果你使用版本控制，那么Vagrantfile意味着是你的版本控制文件。</p>
<h1 id="BOXS"><a href="#BOXS" class="headerlink" title="BOXS"></a>BOXS</h1><p>从零构建一个虚拟机是枯燥无味的，Vagrant使用基础镜像快速的克隆虚拟机。这基础的镜像在Vagrant中叫<code>boxes</code>。而你环境中使用的具体镜像是你Vagrantfile文件首先定义的。</p>
<h2 id="安装一个BOX"><a href="#安装一个BOX" class="headerlink" title="安装一个BOX"></a>安装一个BOX</h2><p>如果你是练习了[UP 和 RUNNING][],那么你已经安装了一个box了，你可以不是再运行下面的命令了。但是，这小节还说明了box的管理，所以你还是需要看的。</p>
<p>使用<code>vagrant box add</code>命令可以把BOX添加到Vagrant中。存储了box后，多个Vagrant环境都可以使用了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant box add hashicorp/precise32</div></pre></td></tr></table></figure>
<p>这命令将会从<a href="https://atlas.hashicorp.com/boxes/search" target="_blank" rel="external">HashiCorp’s Atlas box catalog</a>下载box名称为hashicorp/precise32的镜像。<a href="https://atlas.hashicorp.com/boxes/search" target="_blank" rel="external">HashiCorp’s Atlas box catalog</a>是一个你可以寻找和下载镜像的地方。它使一个很方便的地方，你可以使用本地文件，URL等等添加box。</p>
<p>添加的box可以使用于多个项目。每个项目clone基础镜像作为初始化镜像，基础镜像并不会改变。这静意味着，如果你有两个项目都是使用了刚才添加的<code>hashicorp/precise32</code>镜像，只用添加一次就可以了。</p>
<h2 id="使用BOX"><a href="#使用BOX" class="headerlink" title="使用BOX"></a>使用BOX</h2><p>好现在BOX已经添加入Vagrant了，我们需要设置我们项目需要的镜像。打开<code>Vagrantfile</code>修改内容为下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></div><div class="line">  config.vm.box = <span class="string">"hashicorp/precise32"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>“hashicorp/precise32” 必须是box中包括的。这是为了保证Vagrant知道你需要的box。如果这box之前没有添加，Vagrant会在box运行的、时候自动下载。</p>
<p>下一节，我们会会更多涉及到Vagrant环境和交互。</p>
<h2 id="更多的BOXES"><a href="#更多的BOXES" class="headerlink" title="更多的BOXES"></a>更多的BOXES</h2><p>教程中我们只是使用了”hashicorp/precise32”box。但是当学完这个教程后你马上会想到“我可以从哪里找到boxes？”</p>
<p>找boxes最好的地方是<a href="https://atlas.hashicorp.com/boxes/search" target="_blank" rel="external">HashiCorp’s Atlas box catalog</a>。HashiCorp’s Atlas 有一个公共的目录来免费提供boxes，也提供搜索。</p>
<p>In addition to finding free boxes, HashiCorp’s Atlas lets you host your own boxes, as well as private boxes if you intend on creating boxes for your own organization.</p>
<p>为了找到免费的boxes，HashiCorp’s Atlas也提供私有的boxes服务。</p>
<h1 id="Up-和-SSH"><a href="#Up-和-SSH" class="headerlink" title="Up 和 SSH"></a>Up 和 SSH</h1><p>是时候启动你的Vagrant环境了。运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant up</div></pre></td></tr></table></figure>
<p>不到一分钟，这命令会运行完成，你会得到一个ubuntu系统的机器。你将看不到任何东西，因为Vagrant运行的虚拟机没有UI。为了使用终端你可以使用SSH进入这个机器:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant ssh</div></pre></td></tr></table></figure>
<p>这命令会让你通过SSH登录。现在你可以随意输入命令交互一下或者做一点你想做的事。虽然看起来很诱人，但是小心别使用了<code>rm -rf /</code>, 因为Vagrant共享目录是<code>/vagrant</code>，对应是机器上的Vagrantfile目录，它能删除掉所有的这些文件。共享文件夹会在下一节说明。</p>
<p>当你不在使用这个机器的时候，你可以使用<code>vagrant destroy</code>来删除掉虚拟机。</p>
<h1 id="同步文件夹"><a href="#同步文件夹" class="headerlink" title="同步文件夹"></a>同步文件夹</h1><p>现在创建一个虚拟机太方便了，大多数人不想编辑文件是使用通过终端SSH来进行编辑。Vagrant可以进行文件夹共享。使用同步文件夹，Vagrant会自动同步你的文件。</p>
<p>默认的，Vagrant共享你的项目目录（记住，就是Vagrantfile所在的目录）到/vagrant目录。运行<code>vagrant up</code> 然后SSH进行看看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vagrant up</div><div class="line">...</div><div class="line">$ vagrant ssh</div><div class="line">...</div><div class="line">vagrant@precise32:~$ ls /vagrant</div><div class="line">Vagrantfile</div></pre></td></tr></table></figure>
<p>Vagrantfile就是你本机的文件，你可以尝试改变它看看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vagrant@precise32:~$ touch /vagrant/foo</div><div class="line">vagrant@precise32:~$ exit</div><div class="line">$ ls</div><div class="line">foo Vagrantfile</div></pre></td></tr></table></figure>
<p>看“foo”已经在你的本机了。所以Vagrant保证了文件夹的同步。</p>
<p>使用同步文件夹，你能使用你本地的编辑器编辑文件，然后作用于虚拟机。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>好现在我们运行了一个基于Ubuntu镜像的虚拟机，同时我们可以在我们本地编辑文件同步到虚拟机上。接下来我们搭建一个web server。</p>
<p>我们现在只能使用SSH进入，然后安装一个web Server。这样比较麻烦，如果每个人都需要Web Server他都得重复操作。当你启动的Vagrant的时候，Vagrant支持自动安装软件。</p>
<h2 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h2><p>我们使用Apache来练习，我们使用Shell脚本来进行。创建下面的脚本，然后保存为<code>bootstrap.sh</code> 放在和Vagrantfile用一个目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env bash</div><div class="line"></div><div class="line">apt-get update</div><div class="line">apt-get install -y apache2</div><div class="line">if ! [ -L /var/www ]; then</div><div class="line">  rm -rf /var/www</div><div class="line">  ln -fs /vagrant /var/www</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>Next, we configure Vagrant to run this shell script when setting up our machine. We do this by editing the Vagrantfile, which should now look like this:</p>
<p>接下来我们将在Vagrant中配置这个shell 脚本，以便启动的时候运行。编辑Vagrantfile，内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(&quot;2&quot;) do |config|</div><div class="line">  config.vm.box = &quot;hashicorp/precise32&quot;</div><div class="line">  config.vm.provision :shell, path: &quot;bootstrap.sh&quot;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>好使用下面命令启动看看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant up --provision</div></pre></td></tr></table></figure>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>我们已经有一个运行的Web Server了，同时我们可以在本机上编辑文件。然后，我们访问这个机上的Web Server还必须通过虚拟机的ip来访问。接下来我们学习通过本机访问虚拟机。</p>
<h2 id="PORT-FORWARDING"><a href="#PORT-FORWARDING" class="headerlink" title="PORT FORWARDING"></a>PORT FORWARDING</h2><p>使用端口跳转是一个不错的选择。端口跳转让你可以在本机设置一个端口来访问虚拟机的端口。</p>
<p>好让我们来设置吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(&quot;2&quot;) do |config|</div><div class="line">  config.vm.box = &quot;hashicorp/precise32&quot;</div><div class="line">  config.vm.provision :shell, path: &quot;bootstrap.sh&quot;</div><div class="line">  config.vm.network :forwarded_port, guest: 80, host: 4567</div><div class="line">end</div></pre></td></tr></table></figure></p>
<p>运行<code>vagrant reload</code> 或者 <code>vagrant up</code>。待启动完成，<br>访问<code>http://127.0.0.1:4567</code>看看效果。</p>
<h3 id="别的网络设置"><a href="#别的网络设置" class="headerlink" title="别的网络设置"></a>别的网络设置</h3><p>Vagrant可以设置静态ip地址，详细可以访问<a href="https://docs.vagrantup.com/v2/networking/" target="_blank" rel="external">网络设置</a></p>
<h1 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h1><p>好了现在我们已经有一个运行的Web Server了，同时也可以通过本机端口访问了。但是对于开发环境来说，我们还需要分享，Vagrant可以很方便的进行分享。这小节主要说的是Vagrant的分享。</p>
<p>Vagrant让你很方便的分享你的环境给任何人。使用URL就可以进行分享了。</p>
<h2 id="登录到-HASHICORP’S-ATLAS"><a href="#登录到-HASHICORP’S-ATLAS" class="headerlink" title="登录到 HASHICORP’S ATLAS"></a>登录到 HASHICORP’S ATLAS</h2><p>Before being able to share your Vagrant environment, you’ll need an account on HashiCorp’s Atlas. Don’t worry, it’s free.</p>
<p>在开始分享Vagrant环境之前，你需要一个<a href="https://atlas.hashicorp.com/" target="_blank" rel="external">HashiCorp’s Atlasd</a> 的账号。别担心，免费的。</p>
<p>一旦你有一个账号，用<code>vagrant login</code>登录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vagrant login</div><div class="line">Username or Email: oyach</div><div class="line">Password (will be hidden):</div><div class="line">You&apos;re now logged in!</div></pre></td></tr></table></figure>
<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>一旦你登录了可以运行<code>vagrant share</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vagrant share</div><div class="line">...</div><div class="line">==&gt; default: Your Vagrant Share is running!</div><div class="line">==&gt; default: URL: http://frosty-weasel-0857.vagrantshare.com</div></pre></td></tr></table></figure>
<p>你的URL是不一样的，所以对应使用你的URL。把个URL分享出去，当有人需要这个Web Server的时候，他将会很方便。</p>
<p>如果你更新文件然后刷新这个URL，你会发现更新了。很明显这个是通过英特网来连接的你机器环境了。</p>
<p>Vagrant Share is much more powerful than simply HTTP sharing. For more details, see the complete Vagrant Share documentation.</p>
<p>Vagrant的分享有更多功能，不只是简单的HTTP分享。更多细节<a href="https://docs.vagrantup.com/v2/share/" target="_blank" rel="external">完整Vagrant分享文档</a></p>
<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>现在我们知道了所有基于Web开发的虚拟机的功能。但是是时间休息一会了，也许你需要开发另外的一个项目，也许你需要出去玩玩呢，或者下班回家了。那么怎么清除我们的开发环境呢？</p>
<p>使用Vagrant，你可以 suspend，halt 或者 destroy虚拟机。每个命令都有期特点。你需要选择合适的。</p>
<p><em>Suspending</em> 虚拟机会挂起，它保存了运行时的状态然后停止。当你需要再次运行的适合，只用运行<code>vagrant up</code>,它将会恢复到你挂起时候之前的状态。这个方式非常的快，通常就是5-10秒钟进行停止或者启动。不好的地方时这个虚拟机还在消耗你的磁盘空间，需要更多的磁盘空间进行保存状态到磁盘的RAM区。</p>
<p><em>Halting</em> 这个命令将会优雅的关闭虚拟机。你可以在你需要的时候进行启动。这方式的好处是虚拟机会和关机一样停止。在启动就和冷启动一样。</p>
<p><em>Destroying</em> 消耗虚拟机，清除虚拟机后不会占用你的的硬盘。但是你想再次启动，必须从新下载依赖等等。</p>
<h1 id="重新构建"><a href="#重新构建" class="headerlink" title="重新构建"></a>重新构建</h1><p>当你想再次构建你的项目的时候你可以使用如下命令进行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant up</div></pre></td></tr></table></figure>
<p>这就就会完全的从Vagrantfile中构建出虚拟机环境，这样非常的方便。</p>
<h1 id="提供方式"><a href="#提供方式" class="headerlink" title="提供方式"></a>提供方式</h1><p>读到这里，我们项目都是以VirtualBox进行的。但是Vagrant也可以使用其他的提供方式，比如：VMware, AWS等等。接下来我们将了解如何使用它们。</p>
<p>Once you have a provider installed, you don’t need to make any modifications to your Vagrantfile, just vagrant up with the proper provider and Vagrant will do the rest:</p>
<p>一旦你安装了一个提供方式，你不需要再安装别的东西了，对于Vagrantfile来说已经可以了，比如下面的命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant up --provider=vmware_fusion</div></pre></td></tr></table></figure>
<p>使用AWS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant up --provider=aws</div></pre></td></tr></table></figure>
<p>一旦你使用了别的提供方式，你就不需要再指定提供方式。但是destroy，方式还需要再次指定的。</p>
<p><a href="https://docs.vagrantup.com/v2/providers/" target="_blank" rel="external">更多提供方式</a></p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://www.vagrantup.com/" target="_blank" rel="external">Vagrant 官网</a></li>
<li><a href="https://atlas.hashicorp.com/boxes/search" target="_blank" rel="external">HashiCorp’s Atlas box catalog</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分将会教你上手第一个Vagrant程序，同时让你了解Vagrant提供的大多数功能。如果你很好奇使用Vagrant能带来什么好处，你可以详细了解&lt;a href=&quot;http://docs.vagrantup.com/v2/why-vagrant/&quot;&gt;为什么使用Vagrant？&lt;/a&gt;这个上手教程将会使用&lt;a href=&quot;https://www.virtualbox.org&quot;&gt;virtualbox&lt;/a&gt;。请安装好它。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vagrant" scheme="http://yoursite.com/tags/vagrant/"/>
    
      <category term="virtualbox" scheme="http://yoursite.com/tags/virtualbox/"/>
    
  </entry>
  
  <entry>
    <title>JMH简介</title>
    <link href="http://yoursite.com/2015/08/02/introduction-jmh/"/>
    <id>http://yoursite.com/2015/08/02/introduction-jmh/</id>
    <published>2015-08-02T04:03:00.000Z</published>
    <updated>2016-08-26T07:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>JMH是新的microbenchmark（微基准测试）框架（2013年首次发布）。与其他众多框架相比它的特色优势在于，它是由Oracle实现JIT的相同人员开发的。特别是我想提一下Aleksey Shipilev和他优秀的博客文章。JMH可能与最新的Oracle JRE同步，其结果可信度很高。</p>
<a id="more"></a>
<h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>学习JMH的第一步当然是完成一个简单的Hello World。如何来完成呢？满足3个条件：</p>
<ul>
<li>设置JMH-core和jmh-generator-annprocess的maven依赖</li>
<li>使用<code>@Benchmark</code>来注解测试方法</li>
<li>安装JMH插件（IDEA）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后写一个测试例子,参考于<a href="https://github.com/nitsanw/jmh-samples" target="_blank" rel="external">JMH Samples</a>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BenchmarkMode</span>(Mode.AverageTime)</div><div class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.NANOSECONDS)</div><div class="line"><span class="meta">@State</span>(Scope.Thread)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaselineBenchmarks</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noop</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里来解释代码的意义，首先排除JMH相关的注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaselineBenchmarks</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noop</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就好理解了，BaselineBenchmarks类中有1个<strong>int的字段i</strong>及<strong>两个方法<code>noop()</code>和<code>increment()</code></strong>其中<code>increment()</code>方法中调用了<code>i++</code>。</p>
<p>好了接下来说明JMH的注解，首先是<code>@Benchmark</code>, 这个很好理解代表该注解的方法是一个基准测试方法，你可以想象和单元测试的<code>@Test</code>一样。</p>
<p><code>@BenchmarkMode</code>注解表示使用特定的测试模式，相关参数见下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Mode.Throughput</td>
<td style="text-align:center">计算一个时间单位内操作数量</td>
</tr>
<tr>
<td style="text-align:left">Mode.AverageTime</td>
<td style="text-align:center">计算平均运行时间</td>
</tr>
<tr>
<td style="text-align:left">Mode.SampleTime</td>
<td style="text-align:center">计算一个方法的运行时间(包括百分位)</td>
</tr>
<tr>
<td style="text-align:left">Mode.SingleShotTime</td>
<td style="text-align:center">方法仅运行一次(用于冷测试模式)。或者特定批量大小的迭代多次运行(具体查看后面的<code>@Measurement</code>注解)——这种情况下JMH将计算批处理运行时间(一次批处理所有调用的总时间)</td>
</tr>
<tr>
<td style="text-align:left">这些模式的任意组合</td>
<td style="text-align:center">可以指定这些模式的任意组合——该测试运行多次(取决于请求模式的数量)</td>
</tr>
<tr>
<td style="text-align:left">Mode.All</td>
<td style="text-align:center">所有模式依次运行</td>
</tr>
</tbody>
</table>
<p><code>@OutputTimeUnit</code>是用来指定时间单位，它用一个标准Java类型java.util.concurrent.TimeUnit作为参数。如果在一个测试中指定了多种测试模式，给定的时间单位将用于所有的测试。</p>
<p><code>@State</code>注解定义了给定类实例的可用范围。JMH可以在多线程同时运行的环境测试，因此需要选择正确的状态。</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Scope.Thread</td>
<td style="text-align:center">默认状态。实例将分配给运行给定测试的每个线程。</td>
</tr>
<tr>
<td style="text-align:left">Scope.Benchmark</td>
<td style="text-align:center">运行相同测试的所有线程将共享实例。可以用来测试状态对象的多线程性能(或者仅标记该范围的基准)。</td>
</tr>
<tr>
<td style="text-align:left">Scope.Group</td>
<td style="text-align:center">实例分配给每个线程组(查看后面的线程组部分)</td>
</tr>
</tbody>
</table>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http:å/java-performance.info/jmh/" target="_blank" rel="external">java-performance</a></li>
<li><a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="external">openjdk code-tools jmh</a></li>
<li><a href="https://github.com/nitsanw/jmh-samples" target="_blank" rel="external">jmh 例子</a></li>
<li><a href="http://daniel.mitterdorfer.name/articles/2014/benchmarking-hello-jmh/" target="_blank" rel="external">Hello JMH</a></li>
<li><a href="http://www.importnew.com/12548.html" target="_blank" rel="external">java-performance译文</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JMH是新的microbenchmark（微基准测试）框架（2013年首次发布）。与其他众多框架相比它的特色优势在于，它是由Oracle实现JIT的相同人员开发的。特别是我想提一下Aleksey Shipilev和他优秀的博客文章。JMH可能与最新的Oracle JRE同步，其结果可信度很高。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jmh" scheme="http://yoursite.com/tags/jmh/"/>
    
      <category term="基准测试" scheme="http://yoursite.com/tags/%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>nginx 配置</title>
    <link href="http://yoursite.com/2015/08/01/nginx-conf/"/>
    <id>http://yoursite.com/2015/08/01/nginx-conf/</id>
    <published>2015-08-01T11:03:00.000Z</published>
    <updated>2015-08-02T10:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>安装完成了Nginx，迫不及待的想尝试它的各种功能。</p>
<a id="more"></a>
<h3 id="nginx-conf文件配置"><a href="#nginx-conf文件配置" class="headerlink" title="nginx.conf文件配置"></a>nginx.conf文件配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">#运行用户</div><div class="line">user www-data;    </div><div class="line">#启动进程,通常设置成和cpu的数量相等</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">#全局错误日志及PID文件</div><div class="line">error_log  /var/log/nginx/error.log;</div><div class="line">pid        /var/run/nginx.pid;</div><div class="line"></div><div class="line">#工作模式及连接数上限</div><div class="line">events &#123;</div><div class="line">    use   epoll;             #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能</div><div class="line">    worker_connections  1024;#单个后台worker process进程的最大并发链接数</div><div class="line">    # multi_accept on; </div><div class="line">&#125;</div><div class="line"></div><div class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</div><div class="line">http &#123;</div><div class="line">     #设定mime类型,类型由mime.type文件定义</div><div class="line">    include       /etc/nginx/mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line">    #设定日志格式</div><div class="line">    access_log    /var/log/nginx/access.log;</div><div class="line"></div><div class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</div><div class="line">    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #连接超时时间</div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line">    tcp_nodelay        on;</div><div class="line">    </div><div class="line">    #开启gzip压缩</div><div class="line">    gzip  on;</div><div class="line">    gzip_disable &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</div><div class="line"></div><div class="line">    #设定请求缓冲</div><div class="line">    client_header_buffer_size    1k;</div><div class="line">    large_client_header_buffers  4 4k;</div><div class="line"></div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line">    include /etc/nginx/sites-enabled/*;</div><div class="line"></div><div class="line">    #设定负载均衡的服务器列表</div><div class="line">    upstream mysvr &#123;</div><div class="line">    #weigth参数表示权值，权值越高被分配到的几率越大</div><div class="line">    #本机上的Squid开启3128端口</div><div class="line">    server 192.168.8.1:3128 weight=5;</div><div class="line">    server 192.168.8.2:80  weight=1;</div><div class="line">    server 192.168.8.3:80  weight=6;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">   server &#123;</div><div class="line">    #侦听80端口</div><div class="line">        listen       80;</div><div class="line">        #定义使用www.xx.com访问</div><div class="line">        server_name  www.xx.com;</div><div class="line"></div><div class="line">        #设定本虚拟主机的访问日志</div><div class="line">        access_log  logs/www.xx.com.access.log  main;</div><div class="line"></div><div class="line">    #默认请求</div><div class="line">    location / &#123;</div><div class="line">          root   /root;      #定义服务器的默认网站根目录位置</div><div class="line">          index index.php index.html index.htm;   #定义首页索引文件的名称</div><div class="line"></div><div class="line">          fastcgi_pass  www.xx.com;</div><div class="line">         fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name; </div><div class="line">          include /etc/nginx/fastcgi_params;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    # 定义错误提示页面</div><div class="line">    error_page   500 502 503 504 /50x.html;  </div><div class="line">        location = /50x.html &#123;</div><div class="line">        root   /root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #静态文件，nginx自己处理</div><div class="line">    location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</div><div class="line">        root /var/www/virtual/htdocs;</div><div class="line">        #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</div><div class="line">        expires 30d;</div><div class="line">    &#125;</div><div class="line">    #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        root /root;</div><div class="line">        fastcgi_pass 127.0.0.1:9000;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;</div><div class="line">        include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">    #设定查看Nginx状态的地址</div><div class="line">    location /NginxStatus &#123;</div><div class="line">        stub_status            on;</div><div class="line">        access_log              on;</div><div class="line">        auth_basic              &quot;NginxStatus&quot;;</div><div class="line">        auth_basic_user_file  conf/htpasswd;</div><div class="line">    &#125;</div><div class="line">    #禁止访问 .htxxx 文件</div><div class="line">    location ~ /\.ht &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是一些基本的配置,使用Nginx最大的好处就是负载均衡</p>
<p>如果要使用负载均衡的话,可以修改配置http节点如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</div><div class="line">http &#123;</div><div class="line">     #设定mime类型,类型由mime.type文件定义</div><div class="line">    include       /etc/nginx/mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line">    #设定日志格式</div><div class="line">    access_log    /var/log/nginx/access.log;</div><div class="line"></div><div class="line">    #省略上文有的一些配置节点</div><div class="line"></div><div class="line">    #。。。。。。。。。。</div><div class="line"></div><div class="line">    #设定负载均衡的服务器列表</div><div class="line">     upstream mysvr &#123;</div><div class="line">    #weigth参数表示权值，权值越高被分配到的几率越大</div><div class="line">    server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口</div><div class="line">    server 192.168.8.2x:80  weight=1;</div><div class="line">    server 192.168.8.3x:80  weight=6;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   upstream mysvr2 &#123;</div><div class="line">    #weigth参数表示权值，权值越高被分配到的几率越大</div><div class="line"></div><div class="line">    server 192.168.8.x:80  weight=1;</div><div class="line">    server 192.168.8.x:80  weight=6;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   #第一个虚拟服务器</div><div class="line">   server &#123;</div><div class="line">    #侦听192.168.8.x的80端口</div><div class="line">        listen       80;</div><div class="line">        server_name  192.168.8.x;</div><div class="line"></div><div class="line">      #对aspx后缀的进行负载均衡请求</div><div class="line">    location ~ .*\.aspx$ &#123;</div><div class="line"></div><div class="line">         root   /root;      #定义服务器的默认网站根目录位置</div><div class="line">          index index.php index.html index.htm;   #定义首页索引文件的名称</div><div class="line"></div><div class="line">          proxy_pass  http://mysvr ;#请求转向mysvr 定义的服务器列表</div><div class="line"></div><div class="line">          #以下是一些反向代理的配置可删除.</div><div class="line"></div><div class="line">          proxy_redirect off;</div><div class="line"></div><div class="line">          #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</div><div class="line">          proxy_set_header Host $host;</div><div class="line">          proxy_set_header X-Real-IP $remote_addr;</div><div class="line">          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">          client_max_body_size 10m;    #允许客户端请求的最大单文件字节数</div><div class="line">          client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，</div><div class="line">          proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)</div><div class="line">          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)</div><div class="line">          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)</div><div class="line">          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小</div><div class="line">          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</div><div class="line">          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）</div><div class="line">          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://nginx.org/en/index.html" target="_blank" rel="external">nginx 主页</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装完成了Nginx，迫不及待的想尝试它的各种功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>平均数你真的明白吗</title>
    <link href="http://yoursite.com/2015/01/16/math-how-to-analyze-data-using-the-average/"/>
    <id>http://yoursite.com/2015/01/16/math-how-to-analyze-data-using-the-average/</id>
    <published>2015-01-16T11:03:00.000Z</published>
    <updated>2015-08-02T10:07:51.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>快速测验</strong>:你开车上班30km/h，开车回家60km/h。你的平均速度是多少？</p>
<blockquote>
<p>提示: 结果并不是45mk/h,因为它并没有关注到你上班究竟有多远。看看下表的平均数用途吧。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">名称&amp;含义</th>
<th style="text-align:center">公式/例子</th>
<th style="text-align:left">使用情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">算术平均数[平均数]</td>
<td style="text-align:center">$$\frac{sum}{size}=\frac{a + b + c}{3}$$</td>
<td style="text-align:left">数据集中趋势指标(平均数量)</td>
</tr>
<tr>
<td style="text-align:left">中位数[中值]</td>
<td style="text-align:center">比如list的中间值（2个中间值？值有偶数个，则中位数不唯一）</td>
<td style="text-align:left">使用广泛（比如房子，收入）</td>
</tr>
<tr>
<td style="text-align:left">众数[比较多]</td>
<td style="text-align:center">出现次数最多的变量值</td>
<td style="text-align:left">主要用于分类数据，也可用于顺序数据和数值型数据。</td>
</tr>
<tr>
<td style="text-align:left">几何平均数[平均因子]</td>
<td style="text-align:center">$$\sqrt[3]{abc}$$</td>
<td style="text-align:left">增长率相关，比如：面积，声音</td>
</tr>
<tr>
<td style="text-align:left">调和平均数[平均数据]</td>
<td style="text-align:center">$$\frac{3}{\frac{1}{a}+\frac{1}{b}+\frac{1}{c}}$$</td>
<td style="text-align:left">速率相关，比如：速度，产量，花费</td>
</tr>
<tr>
<td style="text-align:left">平方平均数[方均根]</td>
<td style="text-align:center">$$M=\sqrt{\frac{\sum_{i=1}^{n}x_i^2}{n}}$$</td>
<td style="text-align:left">数值分布呈现正态分布时才适用，比如：交流电电压，电流数值和匀加速运动的位移中点平均速度</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="但是，平均是什么意思？"><a href="#但是，平均是什么意思？" class="headerlink" title="但是，平均是什么意思？"></a>但是，平均是什么意思？</h3><p>我们有必要了解一下，“平均”是怎么一回事呢？</p>
<p>对于我们大多数人来说，它是一个中间数或者是一个“平衡点”的数。我通常习惯使用多观点看问题，这里给出平均数的另一种解释：</p>
<p>平均数是可以用其表现现在每个数的结果。如果你我吧其中一个数替换成平均值，那会怎么样呢？</p>
<p>平均数的一个目标是让我们从采集样本出了解“代表性”数据。但是怎么计算通常需要更具实际情况来定。接下来我先了解算术平均数。</p>
<h3 id="算数平均数"><a href="#算数平均数" class="headerlink" title="算数平均数"></a>算数平均数</h3><p>算术平均数是最常见的平均数了：</p>
<p>$$avaerage = \frac{sum}{number}$$</p>
<p><img src="/assets/images/arithmetic_mean.png" alt="算术平均数"></p>
<p>举个栗子：在电梯里，你重150斤，还有一个同事重100斤，以及一个海象重350斤。那平均体重是多少？</p>
<p>比如：“你能克隆3个一样的人来代替这3个，那么你每个克隆的人需要多重？”</p>
<p>这样情况下我们每个人都能换算出克隆人需要的重量是200斤[(150 + 100 + 350)/3].</p>
<p>优点：</p>
<ul>
<li>很容易列举出来相加</li>
<li>容易计算：加了除。</li>
<li>很直观-中间的数是在最大值和最小值之间。</li>
</ul>
<p>缺点：</p>
<ul>
<li>非常容易受到极端值影响。比如：你有1万元钱，还有一个人有199万，平均一下你也是百万富翁了。很容易让人误导。</li>
</ul>
<p>算术平均数80%都是适用的，但是也有20%的特殊情况，这样情况下算术平均数是不合适的。</p>
<h3 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h3><p>中位数是“数的中间项”。但是不平均(用算术平均数来看)表示同样的数？怎么办？</p>
<p>幽默故事《我第二》：这是数字的中间数是什么？</p>
<ul>
<li>1，2，3，4，100</li>
</ul>
<p>很容易看出来，3是中间数。尽管22是在这些数的中间，但是并非是真正的分布。在这个数列中我们更可能得到一个接近3的数，而非22. 这都是100拉大了平均数，其实看来100并不相关。</p>
<p>中位数解决了数列中间项的问题。如果有两个中间数（偶数项），只取它们的平均值。比如：1 2 3 4 <strong>2.5</strong>就是中位数。</p>
<p><img src="/assets/images/median.png" alt="中位数"></p>
<p>优点：</p>
<ul>
<li>处理特殊值的时候，这样往往是最具代表性的。</li>
<li>分割数据成2组，每个数量都相同。</li>
</ul>
<p>缺点：</p>
<ul>
<li>难计算：你需要对数列排序。</li>
<li>不公知(通用): 你说中间，大家认为你说的是”平均“。</li>
</ul>
<p>关于开车的，”所有驾驶员的一半技术都是低于平均水平的。很吓人对不？“但是在你头脑中你知道这个意思是说：”有一半的司机技术都比中位数那个技术低“。</p>
<p>房价和收入用中位数来代表也比较合适，因为我们希望知道一个中间的位置。比如马云一年有数10亿的收入，但是他的收入和普通人的收入就不太相关了。而且我们也”不感兴趣“，我们只想知道的时”收入与房价的中位数“。</p>
<p>再次说明，使用那种类型的平均数，还是得依靠数据来决定。</p>
<h3 id="众数"><a href="#众数" class="headerlink" title="众数"></a>众数</h3><p>众数听起来可能和平均数无关。它是指在统计中出现次数最多的值。就像投票表决一样，这样更难代表人们想要什么。</p>
<p>比方说你将举行一个聚会，是选择周一好还是周末好？哪天好其实就是满足大多数人的需求，平均在这就没有意义了。（难道说张三喜欢周五，李四喜欢周末，那你就选择周六了!）</p>
<p>同样，颜色，电影等等的喜好等更多可以使用<a href="http://betterexplained.com/articles/measure-any-distance-with-the-pythagorean-theorem/" target="_blank" rel="external">勾股定理</a>来衡量.同样的理想的选择是众数，而非平均数。“the “average” color or “average” movie could be… unsatisfactory”——Rambo meets《傲慢与偏见》。</p>
<p><img src="/assets/images/mode.png" alt="众数"></p>
<p>优点：</p>
<ul>
<li>最有效的投票方式（选择，还是不选择）</li>
<li>给出的选择是大多数人想要的（同样也能给出大多数人不想要的）</li>
<li>简单易懂</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要更多的时间来计算（统计全部票数）</li>
<li>“胜者为王”- 没有中间状态</li>
</ul>
<p>众数并不常见，但是设计一个什么样的按钮比较合适，你通常会用到。</p>
<h3 id="几何平均数"><a href="#几何平均数" class="headerlink" title="几何平均数"></a>几何平均数</h3><p>“平均项”取决于我们如何利用现有的数据。大锁时候把每项相加然后除的算是平均数能解决。但是有的时候我们只这样做是不够的。比如在投资、面积、和体积上，我们不是用加，而是用乘。</p>
<p>再来一个例子。下面的投资组合你比较喜欢哪个？哪个这年会更优特点？</p>
<ul>
<li>投资组合A: +10%, -10%, +10%, -10%</li>
<li>投资组合B: +30%, -30%, +30%, -30%</li>
</ul>
<p>它们看起了基本一样。每天平均（算术平均值）告诉我们，它们两个都像过山车一样，出现盈利和亏损。也许B会跟好，因为一年中它获利是最多的，这样对吗？</p>
<p><strong>死胡同了！</strong>这样做只会让你烧掉股市：投资与回报率是相乘的而不是相加！我们不能不管三七二十一，就用算术平均值——我们需要找到回报的实际速率。</p>
<ul>
<li><p>投资组合A:</p>
<ul>
<li>回报：1.1 <em> 0.9 </em> 1.1 * 0.9 = 0.98（2％的损耗）</li>
<li>去年同期平均水平（0.98）^（1/4）= 每年0.5％的损失（这正好是约2％/ 4，因为数字小）。</li>
</ul>
</li>
<li><p>投资组合B：</p>
<ul>
<li>1.3 <em> 0.7 </em> 1.3 * 0.7 = 0.83（17％的损失）</li>
<li>去年同期平均水平（0.83）^（1/4）= 每年4.6％的损失。</li>
</ul>
</li>
</ul>
<p>A 2% VS B 17%的损失？这是一个巨大的差距。我很想远离这两个投资组合，非要选择那就是A。我们不能只是把收益相加，这是不知道<a href="http://betterexplained.com/articles/an-intuitive-guide-to-exponential-functions-e/" target="_blank" rel="external">指数增长</a>的做法。</p>
<p><img src="/assets/images/geometric_mean.png" alt="几何平均数"></p>
<p>更多的例子：</p>
<ul>
<li>通货膨胀率：你有通胀1％，2％和10％。在这段时间的平均通胀是多少？（1.01 <em> 1.02 </em> 1.10）^（1/3）= 4.3％</li>
<li>优惠券：你有5折、2.5折、3.5折的优惠券。假设你可以使用他们，平均折扣是多少？（即和什么优惠券使用3次相同？）。（0.5 <em> 0.75 </em> 0.65）^（1/3）= 37.5％ 。认为优惠券是“消极”的回报-对商店来说。</li>
<li>面积：你有土地40<em>60，那么平均一边是多少呢？（40 </em> 60）^（0.5）= 49。</li>
<li>体积：你有12×24×48的包装箱。“平均”的大小是多少，也就是和多大的立方体相同呢？（12 <em> 24 </em> 48）^（1/3）= 24。</li>
</ul>
<p>我敢肯定你能找到更多的例子：几何平均数处理问题是用乘。我想了很久为什么几何平均数对我们来说很有用，原来就是这样啊。</p>
<h3 id="调和平均数"><a href="#调和平均数" class="headerlink" title="调和平均数"></a>调和平均数</h3><p>调和平均数很难形象化，但是也很有用。（随便说一句，“调和”是指1/2, 1/3 ··· 1的任何东西。）当多个数度一起的时候，调和平均数帮助我们来计算出<strong>平均速度</strong>。我们一起来看看文章开头的快速测验。</p>
<p>我开车30km/h，这意味着我获得了30km/h的录入.平均速度受多个速度（X &amp; Y）影响，你需要考虑录入（input）与产出（output），而并非原始数据（路程等）。</p>
<p>$$average rate = total output/total input$$</p>
<p><img src="/assets/images/harmonic_mean.png" alt="调和平均数"></p>
<p>如果我们吧X和Y放入同一个环境，就速度不同。那我们推理结果是：</p>
<ul>
<li>上班用1/X的时间（1 = 1/30h）</li>
<li>下班用1/Y的时间（1 = 1/60h）</li>
</ul>
<p>最终我们得到：</p>
<ul>
<li>总路程：2（X和Y各自共享1）</li>
<li>总时间：1/X + 1/Y （不同时间，像一个接力赛）</li>
</ul>
<p>列入公式：</p>
<p>$$\frac{2}{\frac{1}{X} + \frac{1}{Y}}$$</p>
<p>如果是3个速度：</p>
<p>$$\frac{3}{\frac{1}{X} + \frac{1}{Y} + \frac{1}{Z}}$$</p>
<p>这是不错的，不用每次都做代数 - 即使是5个速度的平均也不那么麻烦了。我们的例子中，我们去工作是30km/h回来是60km/h。要得到平均速度，我们只用公式就可以了。</p>
<p>这样不需要我们知道有多远的路程？而且！不管路多远，X和Y具有相同的输出; 也就是说，我们去X km的速度的X，和另一条X km的速度Y的平均速度和去1 km的速度的X和1km的速度Y一样：</p>
<p>$$\frac{2X}{\frac{X}{30} + \frac{X}{60}} = \frac{2}{\frac{1}{30} + \frac{1}{60}}$$</p>
<p>这是合理的，一般是朝着较慢的速度（相比60来说更接近30）倾斜。毕竟，相比30km/h和60km/h相比，我们花了两倍的时间：如果工作60（km）远，它的2个小时去，1小时回来。</p>
<p>核心思想：用单个元素去替换多个元素。在我们的例子中，我们开车40km/h,（途中有,而不是30km/h），并在路上开车40km/h回（而不是60）。重要的是要记住，我们需要将平均速度中的每个“相关”替换。</p>
<p>几个例子：</p>
<ul>
<li>数据传输：我们在客户端和服务器之间发送数据。客户机在10GB/元发送数据，并接收服务器，在20GB/元。平均成本是多少？我们每一个部分平均成本是2 /（1/10 + 1/20）= 13.3GB/元。也就是说，我们可以交换客户端和服务器的两台机器，成本13.3 GB /元。由于数据被发送和接收的（各部分做“一半工作”），我们真正的速度是13.3 / 2 = 6.65 GB /元。</li>
<li>机器的生产率：我们有一台机器，有预备阶段和完成阶段。当预备时，它能生产25小部件/小时。当完成时，它能生产10小部件/小时。整体生产率是多少？平均2 /（1/25 + 1/10）= 14.28部件/小时的每一个阶段。也就是说，现有的可以替换为相同运行的部件14.28 /小时同样的效果。由于经过两个阶段，本机完成14.28 / 2 = 7.14部件/小时。</li>
<li>买股票。假设你买了价值1000元每月的股票，不讨论价格（平均成本）。你三月付25美元/股一月30元/股，二月35美元/股。支付的平均价格是多少？3 /（1/25 + 1/30 1/35 +）=29.43美元（因为你买了在较低的价格，少的更昂贵）。你有$ 3000 / 29.43 = 101.94万股。这“工作量”有点抽象-这是美元转成股份。几个月比别人用更多的美元来购买股票，在这种情况下，高利率是糟糕的情况。</li>
</ul>
<p>调和平均数同样可以用于衡量利率。</p>
<h3 id="平方平均数"><a href="#平方平均数" class="headerlink" title="平方平均数"></a>平方平均数</h3><p>平方平均数只有在数值分布呈现正态分布时才适用。高中的数学题目中常常会出现以方均根值计算班级平均成绩的题目， 这是预先假设全班成绩为正态分布的结果，实际情况不一定完全适用。 如成绩分布极为平均或呈现多峰状(如 30分、70分的人数远超过其它分数的人数)， 方均根值就无法真实表现出该班级的平均成绩。</p>
<p>平方平均数常用来计算一组数据和某个数据的“平均差”。像交流电的电压、电流数值以及均匀加速直线运动的位移中点平均速度，都是以其实际数值的方均根表示。例如，交流电 220V 表示电压信号的均方根（又称为有效值），即 220V，为交流电瞬时值（瞬时值又称暂态值）的最大值的$$\frac{1}{\sqrt{2}}$$。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>即使一个简单的方法有会有多种用途，还有好多有用的我们没有覆盖<br>（加权平均值）。关键还是方法理解：</p>
<ul>
<li>“平均项”是可以看作可以取代别的项的。</li>
<li>平均使用哪种类型是要取决于实际运用。</li>
</ul>
<p>数学是多么让人着迷，就一个平均值都千变万化。Happy math.</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://betterexplained.com/articles/how-to-analyze-data-using-the-average/" target="_blank" rel="external">how-to-analyze-data-using-the-average</a></li>
<li><a href="http://en.wikipedia.org/wiki/Arithmetic_mean" target="_blank" rel="external">维基百科 Arithmetic Mean</a></li>
<li><a href="http://en.wikipedia.org/wiki/Mode_(statistics" target="_blank" rel="external">维基百科 Mode</a>)</li>
<li><a href="http://en.wikipedia.org/wiki/Median" target="_blank" rel="external">维基百科 Median</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E8%B0%83%E5%92%8C%E5%B9%B3%E5%9D%87%E6%95%B0" target="_blank" rel="external">维基百科 Harmonic Mean</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%B9%B3%E6%96%B9%E5%B9%B3%E5%9D%87%E6%95%B0" target="_blank" rel="external">维基百科 Quadratic Mean</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;快速测验&lt;/strong&gt;:你开车上班30km/h，开车回家60km/h。你的平均速度是多少？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示: 结果并不是45mk/h,因为它并没有关注到你上班究竟有多远。看看下表的平均数用途吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;名称&amp;amp;含义&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;公式/例子&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;使用情况&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;算术平均数[平均数]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$$\frac{sum}{size}=\frac{a + b + c}{3}$$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;数据集中趋势指标(平均数量)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;中位数[中值]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;比如list的中间值（2个中间值？值有偶数个，则中位数不唯一）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;使用广泛（比如房子，收入）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;众数[比较多]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;出现次数最多的变量值&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;主要用于分类数据，也可用于顺序数据和数值型数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;几何平均数[平均因子]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$$\sqrt[3]{abc}$$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;增长率相关，比如：面积，声音&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;调和平均数[平均数据]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$$\frac{3}{\frac{1}{a}+\frac{1}{b}+\frac{1}{c}}$$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;速率相关，比如：速度，产量，花费&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;平方平均数[方均根]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$$M=\sqrt{\frac{\sum_{i=1}^{n}x_i^2}{n}}$$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;数值分布呈现正态分布时才适用，比如：交流电电压，电流数值和匀加速运动的位移中点平均速度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>HashMap vs. TreeMap vs. Hashtable vs. LinkedHashMap</title>
    <link href="http://yoursite.com/2014/11/03/hashmap-vs-treemap-vs-hashtable-vs-linkedhashmap/"/>
    <id>http://yoursite.com/2014/11/03/hashmap-vs-treemap-vs-hashtable-vs-linkedhashmap/</id>
    <published>2014-11-03T05:33:00.000Z</published>
    <updated>2016-08-26T07:24:51.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>map是最重要的数据结构之一。在这篇文章中，我会向你展示如：HashMap, TreeMap, HashTable 和 LinkedHashMap的使用以及它们的不同。</p>
<a id="more"></a>
<h3 id="1-Map概述"><a href="#1-Map概述" class="headerlink" title="1. Map概述"></a>1. Map概述</h3><p><img src="/assets/images/MapClassHierarchy-600x354.jpg" alt="map uml"></p>
<p>HashMap, TreeMap, Hashtable 和 LinkedHashMap在Java SE中通常有4个相同实现点。简单一句话描述如下：</p>
<ul>
<li>HashMap 是哈希列表的一个实现，它并没有针对key或者值进行排序。</li>
<li>TreeMap 是基于红黑树的一个实现，它针对key进行了排序。</li>
<li>LinkedHashMap 保留了插入顺序。</li>
<li>Hashtable 是同步的, 功能同HashMap。</li>
</ul>
<p>这就告诉我们如果是线程安全的，我们就应该使用HashMap，因为Hashtable同步是回增加开销的。</p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>如果HashMap 的key是自定义对象，遵循规范应该重写 equals() 和 hashCode() 方法。看如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">	String color;</div><div class="line"> </div><div class="line">	Dog(String c) &#123;</div><div class="line">		color = c;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;	</div><div class="line">		<span class="keyword">return</span> color + <span class="string">" dog"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHashMap</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		HashMap&lt;Dog, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;Dog, Integer&gt;();</div><div class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="string">"red"</span>);</div><div class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="string">"black"</span>);</div><div class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="string">"white"</span>);</div><div class="line">		Dog d4 = <span class="keyword">new</span> Dog(<span class="string">"white"</span>);</div><div class="line"> </div><div class="line">		hashMap.put(d1, <span class="number">10</span>);</div><div class="line">		hashMap.put(d2, <span class="number">15</span>);</div><div class="line">		hashMap.put(d3, <span class="number">5</span>);</div><div class="line">		hashMap.put(d4, <span class="number">20</span>);</div><div class="line"> </div><div class="line">		<span class="comment">//输出大小</span></div><div class="line">		System.out.println(hashMap.size());</div><div class="line"> </div><div class="line">		<span class="comment">//迭代HashMap</span></div><div class="line">		<span class="keyword">for</span> (Entry&lt;Dog, Integer&gt; entry : hashMap.entrySet()) &#123;</div><div class="line">			System.out.println(entry.getKey().toString() + <span class="string">" - "</span> + entry.getValue());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>4
white dog - 5
black dog - 15
red dog - 10
white dog - 20
</code></pre><p>注意，我们错误的添加了”white dogs” 2次，但是HashMap 同样保存了它。这是没有意义的，因为现在我们都搞不清楚了，白色的狗到底有多少是真的存在的。</p>
<p>正确的写法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">	String color;</div><div class="line"> </div><div class="line">	Dog(String c) &#123;</div><div class="line">		color = c;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ((Dog) o).color == <span class="keyword">this</span>.color;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> color.length();</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;	</div><div class="line">		<span class="keyword">return</span> color + <span class="string">" dog"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在的结果如下:</p>
<pre><code>3
red dog - 10
white dog - 20
black dog - 15
</code></pre><p>其原因是HashMap不允许两个相同主键的元素。默认情况下，hashCode()和equals()方法在Object类中实现使用。默认的hashCode()方法用不同的整数来区别对象，这时只有当两个对象指向同一个引用，equals() 才会返回true。如果你不是很了解，请了解<a href="!--￼5--">hashCode() 和 equals()</a>。</p>
<p>了解<a href="!--￼6--">常用的HashMap方法</a>，例如：迭代，打印等等。</p>
<h3 id="3-TreeMap"><a href="#3-TreeMap" class="headerlink" title="3. TreeMap"></a>3. TreeMap</h3><p>TreeMap是通过key来排序的。让我们先来看看下面的例子就明白了“根据key来排序”的想法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">	String color;</div><div class="line"> </div><div class="line">	Dog(String c) &#123;</div><div class="line">		color = c;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ((Dog) o).color == <span class="keyword">this</span>.color;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> color.length();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;	</div><div class="line">		<span class="keyword">return</span> color + <span class="string">" dog"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTreeMap</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="string">"red"</span>);</div><div class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="string">"black"</span>);</div><div class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="string">"white"</span>);</div><div class="line">		Dog d4 = <span class="keyword">new</span> Dog(<span class="string">"white"</span>);</div><div class="line"> </div><div class="line">		TreeMap&lt;Dog, Integer&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;Dog, Integer&gt;();</div><div class="line">		treeMap.put(d1, <span class="number">10</span>);</div><div class="line">		treeMap.put(d2, <span class="number">15</span>);</div><div class="line">		treeMap.put(d3, <span class="number">5</span>);</div><div class="line">		treeMap.put(d4, <span class="number">20</span>);</div><div class="line"> </div><div class="line">		<span class="keyword">for</span> (Entry&lt;Dog, Integer&gt; entry : treeMap.entrySet()) &#123;</div><div class="line">			System.out.println(entry.getKey() + <span class="string">" - "</span> + entry.getValue());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>Exception in thread &quot;main&quot; java.lang.ClassCastException: collection.Dog cannot be cast to java.lang.Comparable
at java.util.TreeMap.put(Unknown Source)
at collection.TestHashMap.main(TestHashMap.java:35)
</code></pre><p>因为TreeMaps 根据 key值来排序,作为key的对象相互之间必须是可比较的，这就是为什么要实现 Comparable接口。比如你用String作为key，String是实现了 Comparable接口的。</p>
<p>好，没我们改变Dog类，实现 Comparable接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</div><div class="line">	String color;</div><div class="line">	<span class="keyword">int</span> size;</div><div class="line"> </div><div class="line">	Dog(String c, <span class="keyword">int</span> s) &#123;</div><div class="line">		color = c;</div><div class="line">		size = s;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;	</div><div class="line">		<span class="keyword">return</span> color + <span class="string">" dog"</span>;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span>  o.size - <span class="keyword">this</span>.size;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTreeMap</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="string">"red"</span>, <span class="number">30</span>);</div><div class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="string">"black"</span>, <span class="number">20</span>);</div><div class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="string">"white"</span>, <span class="number">10</span>);</div><div class="line">		Dog d4 = <span class="keyword">new</span> Dog(<span class="string">"white"</span>, <span class="number">10</span>);</div><div class="line"> </div><div class="line">		TreeMap&lt;Dog, Integer&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;Dog, Integer&gt;();</div><div class="line">		treeMap.put(d1, <span class="number">10</span>);</div><div class="line">		treeMap.put(d2, <span class="number">15</span>);</div><div class="line">		treeMap.put(d3, <span class="number">5</span>);</div><div class="line">		treeMap.put(d4, <span class="number">20</span>);</div><div class="line"> </div><div class="line">		<span class="keyword">for</span> (Entry&lt;Dog, Integer&gt; entry : treeMap.entrySet()) &#123;</div><div class="line">			System.out.println(entry.getKey() + <span class="string">" - "</span> + entry.getValue());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>red dog - 10
black dog - 15
white dog - 20
</code></pre><p>它由key来排序，这里就是根据dog的数量来排序。</p>
<p>如果使用 “Dog d4 = new Dog(“white”, 10);” 替换 “Dog d4 = new Dog(“white”, 40);”，结果如下:</p>
<pre><code>white dog - 20
red dog - 10
black dog - 15
white dog - 5
</code></pre><p>其原因是，TreeMap中使用compareTo()方法对键进行比较。不同大小被识别为不同的dog！</p>
<h3 id="4-Hashtable"><a href="#4-Hashtable" class="headerlink" title="4. Hashtable"></a>4. Hashtable</h3><p>在 Java Doc写到:<br>HashMap大致相当于Hashtable，不同之处在于HashMap是不同步的，并且允许null值。</p>
<h3 id="5-LinkedHashMap"><a href="#5-LinkedHashMap" class="headerlink" title="5. LinkedHashMap"></a>5. LinkedHashMap</h3><p>LinkedHashMap 是 HashMap 的一个子类。这就意味着LinkedHashMap 继承了 HashMap 的所有功能。额外的链表插入是有序的。</p>
<p>我们把上面的HashMap的例子改成LinkedHashMap:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">	String color;</div><div class="line"> </div><div class="line">	Dog(String c) &#123;</div><div class="line">		color = c;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ((Dog) o).color == <span class="keyword">this</span>.color;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> color.length();</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;	</div><div class="line">		<span class="keyword">return</span> color + <span class="string">" dog"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHashMap</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"> </div><div class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="string">"red"</span>);</div><div class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="string">"black"</span>);</div><div class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="string">"white"</span>);</div><div class="line">		Dog d4 = <span class="keyword">new</span> Dog(<span class="string">"white"</span>);</div><div class="line"> </div><div class="line">		LinkedHashMap&lt;Dog, Integer&gt; linkedHashMap = <span class="keyword">new</span> LinkedHashMap&lt;Dog, Integer&gt;();</div><div class="line">		linkedHashMap.put(d1, <span class="number">10</span>);</div><div class="line">		linkedHashMap.put(d2, <span class="number">15</span>);</div><div class="line">		linkedHashMap.put(d3, <span class="number">5</span>);</div><div class="line">		linkedHashMap.put(d4, <span class="number">20</span>);</div><div class="line"> </div><div class="line">		<span class="keyword">for</span> (Entry&lt;Dog, Integer&gt; entry : linkedHashMap.entrySet()) &#123;</div><div class="line">			System.out.println(entry.getKey() + <span class="string">" - "</span> + entry.getValue());</div><div class="line">		&#125;		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出:</p>
<pre><code>red dog - 10
black dog - 15
white dog - 20
</code></pre><p>HashMap和LinkedHashMap 所不同的是，插入顺序不保留。输出如下：</p>
<pre><code>red dog - 10
white dog - 20
black dog - 15
</code></pre><p>了解一下<a href="!--￼7--">ArrayList vs. LinkedList vs. Vector</a></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/03/hashmap-vs-treemap-vs-hashtable-vs-linkedhashmap/" target="_blank" rel="external">HashMap vs. TreeMap vs. Hashtable vs. LinkedHashMap</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;map是最重要的数据结构之一。在这篇文章中，我会向你展示如：HashMap, TreeMap, HashTable 和 LinkedHashMap的使用以及它们的不同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>在JDK 6 和 JDK 7中substring()方法的区别</title>
    <link href="http://yoursite.com/2014/10/09/the-substring-method-in-jdk-6-and-jdk-7/"/>
    <id>http://yoursite.com/2014/10/09/the-substring-method-in-jdk-6-and-jdk-7/</id>
    <published>2014-10-09T04:33:00.000Z</published>
    <updated>2016-08-26T07:26:37.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>在JDK6和JDK7中substring(int beginIndex, int endIndex)这个方法是有区别的。知道它的区别有助于你用好它。最简单的时候，我们会用substring()来代替substring(int beginIndex, int endIndex)方法</p>
<a id="more"></a>
<h3 id="1-substring-都做了什么？"><a href="#1-substring-都做了什么？" class="headerlink" title="1.substring()都做了什么？"></a>1.substring()都做了什么？</h3><p>substring(int beginIndex, int endIndex) 方法返回一个以beginIndex开始endIndex-1结束的字串。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String x = <span class="string">"abcdef"</span>;</div><div class="line">x = x.substring(<span class="number">1</span>,<span class="number">3</span>);</div><div class="line">System.out.println(x);</div></pre></td></tr></table></figure>
<p>输出是</p>
<pre><code>bc
</code></pre><h3 id="2-当substring-调用的时候发生了什么？"><a href="#2-当substring-调用的时候发生了什么？" class="headerlink" title="2.当substring()调用的时候发生了什么？"></a>2.当substring()调用的时候发生了什么？</h3><p>你可能知道字符串x是不变的。当x被赋予x.substring(1,3)结果的时候，它的指针通常是指向了一个新的字符串。如下图：</p>
<p><img src="/assets/images/string-immutability-1.jpeg" alt="string 不可改变性"></p>
<p>然而这图表示并不完全对，或者它只是表示了在堆里真实的情况。在 JDK 6 和 JDK 7中，调用substring()方法实际处理是不同的。</p>
<h3 id="3-在JDK-6中的substring"><a href="#3-在JDK-6中的substring" class="headerlink" title="3.在JDK 6中的substring()"></a>3.在JDK 6中的substring()</h3><p>字符串是由一个char的数组表示。在JDK 6中，String类有3个字段：char value[], int offset, int count。它们是用来储存实际的字符阵列（char value[]），该阵列的第一个索引（int offset），该字符串中的字符数(int count)。</p>
<p>当substring()被调用的时候，它创建了一个新的字符串，但是这个字符串的值还是指向的相同数组中的堆。两个字符串不同的地方的地方只是count值和offset值。</p>
<p><img src="/assets/images/string-substring-jdk6.jpeg" alt="string 不可改变性"></p>
<p>下面的代码可以简单解释这个问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JDK 6</span></div><div class="line">String(<span class="keyword">int</span> offset, <span class="keyword">int</span> count, <span class="keyword">char</span> value[]) &#123;</div><div class="line">	<span class="keyword">this</span>.value = value;</div><div class="line">	<span class="keyword">this</span>.offset = offset;</div><div class="line">	<span class="keyword">this</span>.count = count;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</div><div class="line">	<span class="comment">//check boundary</span></div><div class="line">	<span class="keyword">return</span>  <span class="keyword">new</span> String(offset + beginIndex, endIndex - beginIndex, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-在DK-6中substring-带来的问题"><a href="#4-在DK-6中substring-带来的问题" class="headerlink" title="4.在DK 6中substring()带来的问题"></a>4.在DK 6中substring()带来的问题</h3><p>如果你有一个<strong>非常非常</strong>长的的字符串，但是当你使用substring()的时候，你仅需要一小部分。这将导致性能问题，当你只需要一小部分的时候，你还是保存了全部的值。对于DK 6来说通常使用下面的方法解决，它将指针指向实际的子串：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x = x.substring(x, y) + <span class="string">""</span></div></pre></td></tr></table></figure>
<h3 id="5-在DK-7中使用Substring"><a href="#5-在DK-7中使用Substring" class="headerlink" title="5.在DK 7中使用Substring()"></a>5.在DK 7中使用Substring()</h3><p>在JDK 7中改善了上述问题。在JDK 7中，substring()会创建一个新的数组在堆里。</p>
<p><img src="/assets/images/string-substring-jdk7.jpeg" alt="string 不可改变性"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JDK 7</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">	<span class="comment">//check boundary</span></div><div class="line">	<span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset + count);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</div><div class="line">	<span class="comment">//check boundary</span></div><div class="line">	<span class="keyword">int</span> subLen = endIndex - beginIndex;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> String(value, beginIndex, subLen);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!--more-->
<h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p>如果你对Java String感兴趣还可以读一下下面的内容</p>
<ul>
<li><a href="!--￼4--">Java字符串的十大问题</a></li>
<li><a href="http://www.javaadvent.com/2012/12/changes-to-stringsubstring-in-java-7.html" target="_blank" rel="external">Changes to substring</a></li>
<li><a href="http://nextmovesoftware.com/blog/2013/07/05/java-6-vs-java-7-when-implementation-matters/" target="_blank" rel="external">Java 6 vs Java 7 when implementation matters</a></li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/02/longest-substring-which-contains-2-unique-characters/" target="_blank" rel="external">Longest Substring Which Contains 2 Unique Characters</a></li>
<li><a href="http://www.programcreek.com/2013/02/leetcode-longest-substring-without-repeating-characters-java/" target="_blank" rel="external">LeetCode – Longest Substring Without Repeating Characters (Java)</a></li>
<li><a href="http://www.programcreek.com/2013/12/leetcode-solution-of-longest-palindromic-substring-java/" target="_blank" rel="external">Leetcode Solution of Longest Palindromic Substring in Java</a></li>
<li><a href="http://www.programcreek.com/2013/09/top-10-faqs-of-java-strings/" target="_blank" rel="external">Top 10 questions of Java Strings</a></li>
<li><a href="http://www.programcreek.com/2013/09/the-substring-method-in-jdk-6-and-jdk-7/" target="_blank" rel="external">the substring method in jdk6 and jdk7</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JDK6和JDK7中substring(int beginIndex, int endIndex)这个方法是有区别的。知道它的区别有助于你用好它。最简单的时候，我们会用substring()来代替substring(int beginIndex, int endIndex)方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="jdk" scheme="http://yoursite.com/tags/jdk/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList vs. LinkedList vs. Vector</title>
    <link href="http://yoursite.com/2014/09/28/arraylist-vs-linkedlist-vs-vector/"/>
    <id>http://yoursite.com/2014/09/28/arraylist-vs-linkedlist-vs-vector/</id>
    <published>2014-09-28T10:33:00.000Z</published>
    <updated>2016-08-26T07:27:11.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h3 id="1-List概念"><a href="#1-List概念" class="headerlink" title="1. List概念"></a>1. List概念</h3><p>List正如其名，是一个一组有序的元素。当我说List，最好比较一下。Set 中的元素是唯一、有序的。下图是集合的层次结构图，从中你可以了解到集合的概念。</p>
<a id="more"></a>
<p><img src="/assets/images/java-collection-hierarchy.jpeg" alt="集合层次图"></p>
<h3 id="2-ArrayList-vs-LinkedList-vs-Vector"><a href="#2-ArrayList-vs-LinkedList-vs-Vector" class="headerlink" title="2.ArrayList vs. LinkedList vs. Vector"></a>2.ArrayList vs. LinkedList vs. Vector</h3><p>从上面的继承图我们了解到它们都实现了List接口。它们使用方式都很相似。最主要是的实现区别是当使用不同操作性能会不同。</p>
<p><strong>ArrayList</strong>是可变大小(容量)数组的实现。当有更多的元素加入ArrayList，ArrayList是会自动增加大小的。它的元素可以使用get 和 set方法来访问，因为ArrayList 本质还是地址连续的数组。</p>
<p><strong>LinkedList</strong>是双链表的实现。它add 和 remove操作的性能会比Arraylist高不少，但是get 和 set操作就比 Arraylist差。</p>
<p><strong>Vector</strong>和ArrayList很像，但是它是同步的。</p>
<p>当你的程序是线程安全的，那么ArrayList 是比较好的选择。当添加比较多的元素的时候Vector 和 ArrayList 需要更多的空间。Vector的增长方式是双倍其大小，ArrayList 是50% 的增长。LinkedList也实现Queue 接口所以功能比ArrayList 和 Vector较多，比如：offer(), peek(), poll()等等。</p>
<blockquote>
<p>注意：默认初始化ArrayList 的大小是非常小的，如果你想创建一个有很大容量的ArrayList，好的习惯是使用构造方法指定大小。这样会减少增加容量的时间花费。</p>
</blockquote>
<h3 id="3-ArrayList-例子"><a href="#3-ArrayList-例子" class="headerlink" title="3.ArrayList 例子"></a>3.ArrayList 例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Integer&gt; al = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">al.add(<span class="number">3</span>);</div><div class="line">al.add(<span class="number">2</span>);		</div><div class="line">al.add(<span class="number">1</span>);</div><div class="line">al.add(<span class="number">4</span>);</div><div class="line">al.add(<span class="number">5</span>);</div><div class="line">al.add(<span class="number">6</span>);</div><div class="line">al.add(<span class="number">6</span>);</div><div class="line"> </div><div class="line">Iterator&lt;Integer&gt; iter1 = al.iterator();</div><div class="line"><span class="keyword">while</span>(iter1.hasNext())&#123;</div><div class="line">	System.out.println(iter1.next());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-LinkedList-例子"><a href="#4-LinkedList-例子" class="headerlink" title="4.LinkedList 例子"></a>4.LinkedList 例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">LinkedList&lt;Integer&gt; ll = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">ll.add(<span class="number">3</span>);</div><div class="line">ll.add(<span class="number">2</span>);		</div><div class="line">ll.add(<span class="number">1</span>);</div><div class="line">ll.add(<span class="number">4</span>);</div><div class="line">ll.add(<span class="number">5</span>);</div><div class="line">ll.add(<span class="number">6</span>);</div><div class="line">ll.add(<span class="number">6</span>);</div><div class="line"> </div><div class="line">Iterator&lt;Integer&gt; iter2 = ll.iterator();</div><div class="line"><span class="keyword">while</span>(iter2.hasNext())&#123;</div><div class="line">	System.out.println(iter2.next());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和上面的例子一样，它们使用方式相同。实际不同是他们的实现的方式，和操作的复杂性。</p>
<h3 id="5-Vector"><a href="#5-Vector" class="headerlink" title="5.Vector"></a>5.Vector</h3><p>Vector 几乎和ArrayList相同，不同的是Vector是同步的。正因为如此，它比ArrayList开销多。通常情况下，大多数Java程序员使用的ArrayList，而不是Vector，因为他们可以自己的显式控制同步。</p>
<h3 id="6-ArrayList-vs-LinkedList的性能"><a href="#6-ArrayList-vs-LinkedList的性能" class="headerlink" title="6.ArrayList vs. LinkedList的性能"></a>6.ArrayList vs. LinkedList的性能</h3><p>时间复杂度比较如下：</p>
<p><img src="/assets/images/arraylist-vs-linkedlist-complexity.png" alt="时间复杂度比较"></p>
<p>add() 在表中代表 add(E e), 同样 remove() 是说 remove(int index)</p>
<ul>
<li>ArrayList 在随意的add/remove时，时间复杂度是O(n)，但是只是在最后add/remove时是O(1).</li>
<li>LinkedList 在随意add/remove时，时间复杂度是O(n)，但是在开头或者结尾操作时间复杂度是 O(1)。</li>
</ul>
<p>我使用了下面的代码测试了其性能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line"> </div><div class="line"><span class="comment">// ArrayList add</span></div><div class="line"><span class="keyword">long</span> startTime = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</div><div class="line">	arrayList.add(i);</div><div class="line">&#125;</div><div class="line"><span class="keyword">long</span> endTime = System.nanoTime();</div><div class="line"><span class="keyword">long</span> duration = endTime - startTime;</div><div class="line">System.out.println(<span class="string">"ArrayList add:  "</span> + duration);</div><div class="line"> </div><div class="line"><span class="comment">// LinkedList add</span></div><div class="line">startTime = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</div><div class="line">	linkedList.add(i);</div><div class="line">&#125;</div><div class="line">endTime = System.nanoTime();</div><div class="line">duration = endTime - startTime;</div><div class="line">System.out.println(<span class="string">"LinkedList add: "</span> + duration);</div><div class="line"> </div><div class="line"><span class="comment">// ArrayList get</span></div><div class="line">startTime = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">	arrayList.get(i);</div><div class="line">&#125;</div><div class="line">endTime = System.nanoTime();</div><div class="line">duration = endTime - startTime;</div><div class="line">System.out.println(<span class="string">"ArrayList get:  "</span> + duration);</div><div class="line"> </div><div class="line"><span class="comment">// LinkedList get</span></div><div class="line">startTime = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">	linkedList.get(i);</div><div class="line">&#125;</div><div class="line">endTime = System.nanoTime();</div><div class="line">duration = endTime - startTime;</div><div class="line">System.out.println(<span class="string">"LinkedList get: "</span> + duration);</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">// ArrayList remove</span></div><div class="line">startTime = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">9999</span>; i &gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">	arrayList.remove(i);</div><div class="line">&#125;</div><div class="line">endTime = System.nanoTime();</div><div class="line">duration = endTime - startTime;</div><div class="line">System.out.println(<span class="string">"ArrayList remove:  "</span> + duration);</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">// LinkedList remove</span></div><div class="line">startTime = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">9999</span>; i &gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">	linkedList.remove(i);</div><div class="line">&#125;</div><div class="line">endTime = System.nanoTime();</div><div class="line">duration = endTime - startTime;</div><div class="line">System.out.println(<span class="string">"LinkedList remove: "</span> + duration);</div></pre></td></tr></table></figure>
<p>输出结果是：</p>
<pre><code>ArrayList add:  13265642
LinkedList add: 9550057
ArrayList get:  1543352
LinkedList get: 85085551
ArrayList remove:  199961301
LinkedList remove: 85768810
</code></pre><p><img src="/assets/images/arraylist-vs-linkedlist1.png" alt="性能图"></p>
<p>对于这两者，很明显LinkedList在add 和 remove比较快，但是get比较慢。基于这个表的测试结果，我们可以知道什么时使用的ArrayList，什么时候使用LinkedList。总之，如果满足如下情况LinkedList应该优先考虑：</p>
<ul>
<li>元素访问不是随机访问</li>
<li>add/remove比较频繁</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/03/arraylist-vs-linkedlist-vs-vector/" target="_blank" rel="external">ArrayList vs. LinkedList vs. Vector</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-List概念&quot;&gt;&lt;a href=&quot;#1-List概念&quot; class=&quot;headerlink&quot; title=&quot;1. List概念&quot;&gt;&lt;/a&gt;1. List概念&lt;/h3&gt;&lt;p&gt;List正如其名，是一个一组有序的元素。当我说List，最好比较一下。Set 中的元素是唯一、有序的。下图是集合的层次结构图，从中你可以了解到集合的概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>在java中为什么字符串是不可变的</title>
    <link href="http://yoursite.com/2014/09/28/why-string-is-immutable-in-java/"/>
    <id>http://yoursite.com/2014/09/28/why-string-is-immutable-in-java/</id>
    <published>2014-09-28T10:33:00.000Z</published>
    <updated>2016-08-26T07:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>在Java中String是一个不可变类。不可变类是一个简单的类，它的实例不能被修改。创建实例的时候在一个实例中的所有信息被初始化并且信息不能被修改。不可变类有许多的优点。本文总结了为什么字符串被设计成不可变的。一个很好的答案是：取决于对内存，同步，数据结构等的深刻理解。</p>
<a id="more"></a>
<h3 id="1-字符串池的要求"><a href="#1-字符串池的要求" class="headerlink" title="1.字符串池的要求"></a>1.字符串池的要求</h3><p>String pool (String intern pool)在方法区是一种特殊的存储区域。当创建一个字符串，如果字符串已经存在于池中，现有字符串的引用将被退回，而不是创建一个新的对象，并返回它的引用。</p>
<p>下面的代码将只创建一个字符串堆对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String string1 = <span class="string">"abcd"</span>;</div><div class="line">String string2 = <span class="string">"abcd"</span>;</div></pre></td></tr></table></figure>
<p>下图是它的运作方式：</p>
<p><img src="/assets/images/java-string-pool.jpeg" alt="java 字符串池"></p>
<p>如果字符串不是一成不变的，不断变化的字符串与一个参考值将导致对其他引用得到了错误的值。</p>
<h3 id="2-缓存Hashcode"><a href="#2-缓存Hashcode" class="headerlink" title="2.缓存Hashcode"></a>2.缓存Hashcode</h3><p>在java中是经常使用hashcode的。例如，在一个HashMap中。不可改变保证了哈希码总是相同的，所以，它可以无需担心改变。这意味着，没有必要每次使都计算哈希码。这是更有效的方式。</p>
<p>在String 类中, 它包括了下面的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash;<span class="comment">//这是用来缓存哈希值的。</span></div></pre></td></tr></table></figure>
<h3 id="3-协助其他对象的使用"><a href="#3-协助其他对象的使用" class="headerlink" title="3.协助其他对象的使用"></a>3.协助其他对象的使用</h3><p>为了使这个问题更加具体，看一下下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">set.add(<span class="keyword">new</span> String(<span class="string">"a"</span>));</div><div class="line">set.add(<span class="keyword">new</span> String(<span class="string">"b"</span>));</div><div class="line">set.add(<span class="keyword">new</span> String(<span class="string">"c"</span>));</div><div class="line"> </div><div class="line"><span class="keyword">for</span>(String a: set)</div><div class="line">	a.value = <span class="string">"a"</span>;</div></pre></td></tr></table></figure>
<p>在这个例子中，如果字符串是可变的，它的值是可以改变这将违反set的设计（set集包含不重复的元素）。这个例子的目的是为了简单起见，在实际中String类是没有value 的域。</p>
<h3 id="4-安全问题"><a href="#4-安全问题" class="headerlink" title="4. 安全问题"></a>4. 安全问题</h3><p>在java类中，字符串是被广泛地作为用参数，例如：网络连接，打开文件等等。如果字符串不是不变的，连接或文件将被改变，并导致严重的安全威胁。该方法还以为是连接到同一台机器，但实际上市没有。可变字符串可能会导致反射的安全问题也一样，这些参数都是字符串。</p>
<p>下面是例子代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(string s)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isSecure(s)) &#123; </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(); </div><div class="line">&#125;</div><div class="line">    <span class="comment">//这将引起问题, 如果s是可变的，别处s的引用改变s的值。    </span></div><div class="line">    causeProblem(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-不可变的对象通常是线程安全的"><a href="#5-不可变的对象通常是线程安全的" class="headerlink" title="5. 不可变的对象通常是线程安全的"></a>5. 不可变的对象通常是线程安全的</h3><p>由于不可变对象不能改变，就可以在多个线程之间自由共享。这消除了执行同步的要求。 </p>
<p>总之，字符串被设计为不可变的，为了效率和安全性。这也是为什么一般情况下不可变的类是优选的。</p>
<h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><ul>
<li><a href="http://www.programcreek.com/2014/03/create-java-string-by-double-quotes-vs-by-constructor/" target="_blank" rel="external">Create Java String Using ” ” or Constructor?</a></li>
<li><a href="http://www.programcreek.com/2009/02/diagram-to-show-java-strings-immutability/" target="_blank" rel="external">Diagram to show Java String’s Immutability</a></li>
<li><a href="http://www.programcreek.com/2013/09/top-8-diagrams-for-understanding-java/" target="_blank" rel="external">Top 8 Diagrams for Understanding Java</a></li>
<li><a href="(&lt;!--￼4--">Java字符串的十大问题</a>)</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/04/why-string-is-immutable-in-java/" target="_blank" rel="external">Why String is immutable in Java ?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Java中String是一个不可变类。不可变类是一个简单的类，它的实例不能被修改。创建实例的时候在一个实例中的所有信息被初始化并且信息不能被修改。不可变类有许多的优点。本文总结了为什么字符串被设计成不可变的。一个很好的答案是：取决于对内存，同步，数据结构等的深刻理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java对象是什么样的呢？</title>
    <link href="http://yoursite.com/2014/09/15/what-do-java-objects-look-like-in-memory/"/>
    <id>http://yoursite.com/2014/09/15/what-do-java-objects-look-like-in-memory/</id>
    <published>2014-09-15T10:33:00.000Z</published>
    <updated>2016-08-26T07:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>我们知道函数在内存中是实现是栈。同时我们知道java方法实现是在JVM栈中的帧，对象就是被分配到堆上的。</p>
<a id="more"></a>
<p>那再堆中java对象到底是什么样的？一旦对象放入内存，它就只是一些字节数据了。</p>
<p>然后我们怎么找到我们需要的东西呢？它保存了一个内部的字段偏移量表。</p>
<p>这是一个类“Base”的结构，它内没有任何方法。下一节我们才讨论方法的结构。</p>
<p><img src="/assets/images/base-300x129.jpg" alt=" Base对象结构"></p>
<p>如果我们有另外一个对象”Derived”继承于”Base”。那内存结构如下：</p>
<p><img src="/assets/images/derived.jpg" alt=" Base对象结构"></p>
<p>子类有和父类同样的内存结构，除此之外还需要新的空间存储新添加的字段。这样的结构哟个好处是，当A的指针指向D对象的时候，这样仍然和指向B是一样的。因此，通过操作B对象操作D是很安全的，而且也没有必要的动态监测B的指针了。</p>
<p>因为有相同的逻辑，方法可以仿制对象的开头。</p>
<p><img src="/assets/images/virtual-function-tables.jpg" alt=" Base对象结构"></p>
<p>然而这样的方法不是很有效。如果一个类有很多方法（如M），那么每个对象都必须有空间来存储M的指针，这样使得创建对象慢，对象大。</p>
<p>改进方式是创建一个虚函数表（或者vtable），这是一个数组，指向特殊类的，这样使得每穿件一个对象的指针都存储到虚函数表。</p>
<p><img src="/assets/images/objects-in-memory-optimization.jpg" alt=" 优化对象内存存储"></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.stanford.edu/class/cs143/" target="_blank" rel="external">Stanford Compilers Lectures</a></li>
<li><a href="http://www.artima.com/insidejvm/ed2/jvm6.html" target="_blank" rel="external">jvm</a></li>
<li><a href="http://www.programcreek.com/2011/11/what-do-java-objects-look-like-in-memory/" target="_blank" rel="external">What do Java objects look like in memory during run-time?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道函数在内存中是实现是栈。同时我们知道java方法实现是在JVM栈中的帧，对象就是被分配到堆上的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Arrays.sort()</title>
    <link href="http://yoursite.com/2014/09/15/arrays-sort-comparator/"/>
    <id>http://yoursite.com/2014/09/15/arrays-sort-comparator/</id>
    <published>2014-09-15T04:33:00.000Z</published>
    <updated>2015-08-02T05:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><code>Arrays.sort(T[], Comparator &lt; ? super T &gt; c)</code>是用户用来排序自定义对象的方法。官方的java doc简要的描述了她如何使用，但是没有更多的深入理解。在这篇文章中，我将会带你深入理解其关键。</p>
<a id="more"></a>
<h3 id="1-如何使用Arrays-sort-例子"><a href="#1-如何使用Arrays-sort-例子" class="headerlink" title="1. 如何使用Arrays.sort(): 例子"></a>1. 如何使用Arrays.sort(): 例子</h3><p>阅读下面的例子，你能很快知道如何使用。一个Comparator用来根据Dogs的大小来比较，这个作为排序的方法的参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> size;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">		size = s;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogSizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> o1.size - o2.size;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySort</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="number">2</span>);</div><div class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="number">1</span>);</div><div class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="number">3</span>);</div><div class="line"> </div><div class="line">		Dog[] dogArray = &#123;d1, d2, d3&#125;;</div><div class="line">		printDogs(dogArray);</div><div class="line"> </div><div class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> DogSizeComparator());	</div><div class="line">		printDogs(dogArray);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDogs</span><span class="params">(Dog[] dogs)</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(Dog d: dogs)</div><div class="line">			System.out.print(d.size + <span class="string">" "</span> );</div><div class="line"> </div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>2 1 3
1 2 3
</code></pre><h3 id="2-Arrays-sort-的使用策略"><a href="#2-Arrays-sort-的使用策略" class="headerlink" title="2. Arrays.sort()的使用策略"></a>2. Arrays.sort()的使用策略</h3><p>这是一个经典的<a href="!--￼3--">策略模式（Strategy）</a>例子,这是非常值得说明的，为什么策略模式是最好的解决方法。总的看来，策略模式在运行时候使用了不同的算法选择。在这样的情况下，通过传递不同的值进行比较，不同的算法可以选择。基于这个例子，现在假设你有另外一个Comparator用来比较Dog的重量而不是大小，你可以简单的创建一个 Comparator如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> size;</div><div class="line">	<span class="keyword">int</span> weight;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> w)</span></span>&#123;</div><div class="line">		size = s;</div><div class="line">		weight = w; </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogSizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> o1.size - o2.size;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogWeightComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> o1.weight - o2.weight;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySort</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="number">2</span>, <span class="number">50</span>);</div><div class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="number">1</span>, <span class="number">30</span>);</div><div class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="number">3</span>, <span class="number">40</span>);</div><div class="line"> </div><div class="line">		Dog[] dogArray = &#123;d1, d2, d3&#125;;</div><div class="line">		printDogs(dogArray);</div><div class="line"> </div><div class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> DogSizeComparator());	</div><div class="line">		printDogs(dogArray);</div><div class="line"> </div><div class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> DogWeightComparator());	</div><div class="line">		printDogs(dogArray);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDogs</span><span class="params">(Dog[] dogs)</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(Dog d: dogs)</div><div class="line">			System.out.print(<span class="string">"size="</span>+d.size + <span class="string">" weight="</span> + d.weight + <span class="string">" "</span>);</div><div class="line"> </div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>size=2 weight=50 size=1 weight=30 size=3 weight=40 
size=1 weight=30 size=2 weight=50 size=3 weight=40 
size=1 weight=30 size=3 weight=40 size=2 weight=50 
</code></pre><p>Comparator 只是一个接口。任何Comparator 都需要实现这个接口，然后运行时候就可以使用。这就是策略模式的关键。</p>
<h3 id="3-为什么使用-“超类”？"><a href="#3-为什么使用-“超类”？" class="headerlink" title="3. 为什么使用 “超类”？"></a>3. 为什么使用 “超类”？</h3><p>它很简单，如果“Comparator &lt; T &gt; c”是参数，但是第二参数是“Comparator&lt; ? super T &gt; c”。<code>&lt; ? super T &gt;</code>意味着类型可以是T或者是子类的类型。为什么可以是超类？回答是：这样可以让所有子类方法使用相同的比较器。在下面的例子几乎是显而易见的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> size;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">		size = s;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">		size  = s;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalSizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Animal</span>&gt;</span>&#123;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Animal o1, Animal o2)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> o1.size - o2.size;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//in this way, all sub classes of Animal can use this comparator.</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySort</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="number">2</span>);</div><div class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="number">1</span>);</div><div class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="number">3</span>);</div><div class="line"> </div><div class="line">		Dog[] dogArray = &#123;d1, d2, d3&#125;;</div><div class="line">		printDogs(dogArray);</div><div class="line"> </div><div class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> AnimalSizeComparator());	</div><div class="line">		printDogs(dogArray);</div><div class="line"> </div><div class="line">		System.out.println();</div><div class="line"> </div><div class="line">		<span class="comment">//when you have an array of Cat, same Comparator can be used. </span></div><div class="line">		Cat c1 = <span class="keyword">new</span> Cat(<span class="number">2</span>);</div><div class="line">		Cat c2 = <span class="keyword">new</span> Cat(<span class="number">1</span>);</div><div class="line">		Cat c3 = <span class="keyword">new</span> Cat(<span class="number">3</span>);</div><div class="line"> </div><div class="line">		Cat[] catArray = &#123;c1, c2, c3&#125;;</div><div class="line">		printDogs(catArray);</div><div class="line"> </div><div class="line">		Arrays.sort(catArray, <span class="keyword">new</span> AnimalSizeComparator());	</div><div class="line">		printDogs(catArray);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDogs</span><span class="params">(Animal[] animals)</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(Animal a: animals)</div><div class="line">			System.out.print(<span class="string">"size="</span>+a.size + <span class="string">" "</span>);</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>size=2 size=1 size=3 
size=1 size=2 size=3 

size=2 size=1 size=3 
size=1 size=2 size=3 
</code></pre><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>总之，记得Arrays.sort()的如下特性：</p>
<ul>
<li>1.通常使用超类</li>
<li>2.策略模式</li>
<li>3.归并排序nlog(n) 的时间复杂度</li>
<li>4.Java.util.Collections#sort(List &lt; T &gt; list, Comparator &lt; ? super T &gt; c)和Arrays.sort思路很像。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/11/arrays-sort-comparator/" target="_blank" rel="external">Deep Understanding of Arrays.sort()</a></li>
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(T[], java.util.Comparator" target="_blank" rel="external">Arrays.sort(T[], java.util.Comparator)</a>)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Arrays.sort(T[], Comparator &amp;lt; ? super T &amp;gt; c)&lt;/code&gt;是用户用来排序自定义对象的方法。官方的java doc简要的描述了她如何使用，但是没有更多的深入理解。在这篇文章中，我将会带你深入理解其关键。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>关于Java数组的10大方法</title>
    <link href="http://yoursite.com/2014/09/14/top-10-methods-for-java-arrays/"/>
    <id>http://yoursite.com/2014/09/14/top-10-methods-for-java-arrays/</id>
    <published>2014-09-14T04:33:00.000Z</published>
    <updated>2015-08-02T05:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>下面是关于Java数组的10大方法，他们都是在stackoverflow上投票出来的。</p>
<h3 id="1-定义一个数组"><a href="#1-定义一个数组" class="headerlink" title="1. 定义一个数组"></a>1. 定义一个数组</h3><p>不知道为什么这个是问的最多的，难道因为最常见所以最容易忘？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String[] aArray = <span class="keyword">new</span> String[<span class="number">5</span>];</div><div class="line">String[] bArray = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>&#125;;</div><div class="line">String[] cArray = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-打印数组"><a href="#2-打印数组" class="headerlink" title="2. 打印数组"></a>2. 打印数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</div><div class="line">String intArrayString = Arrays.toString(intArray);</div><div class="line"> </div><div class="line"><span class="comment">// 直接打印将打印索引值</span></div><div class="line">System.out.println(intArray);</div><div class="line"><span class="comment">// [I@7150bd4d</span></div><div class="line"> </div><div class="line">System.out.println(intArrayString);</div><div class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<h3 id="3-把一个数组转化成为ArrayList"><a href="#3-把一个数组转化成为ArrayList" class="headerlink" title="3. 把一个数组转化成为ArrayList"></a>3. 把一个数组转化成为ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String[] stringArray = &#123; <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span> &#125;;</div><div class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(stringArray));</div><div class="line">System.out.println(arrayList);</div><div class="line"><span class="comment">// [a, b, c, d, e]</span></div></pre></td></tr></table></figure>
<h3 id="4-判断一个数组中是否有一个特定的值"><a href="#4-判断一个数组中是否有一个特定的值" class="headerlink" title="4. 判断一个数组中是否有一个特定的值"></a>4. 判断一个数组中是否有一个特定的值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String[] stringArray = &#123; <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span> &#125;;</div><div class="line"><span class="keyword">boolean</span> b = Arrays.asList(stringArray).contains(<span class="string">"a"</span>);</div><div class="line">System.out.println(b);</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="5-连接2个数组"><a href="#5-连接2个数组" class="headerlink" title="5. 连接2个数组"></a>5. 连接2个数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</div><div class="line"><span class="keyword">int</span>[] intArray2 = &#123; <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</div><div class="line"><span class="comment">// Apache Commons Lang library</span></div><div class="line"><span class="keyword">int</span>[] combinedIntArray = ArrayUtils.addAll(intArray, intArray2);</div></pre></td></tr></table></figure>
<h3 id="6-声明一个内联数组"><a href="#6-声明一个内联数组" class="headerlink" title="6. 声明一个内联数组"></a>6. 声明一个内联数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">method(<span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>&#125;);</div></pre></td></tr></table></figure>
<h3 id="7-把数组连接成为一个字符串"><a href="#7-把数组连接成为一个字符串" class="headerlink" title="7. 把数组连接成为一个字符串"></a>7. 把数组连接成为一个字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// containing the provided list of elements</span></div><div class="line"><span class="comment">// Apache common lang</span></div><div class="line">String j = StringUtils.join(<span class="keyword">new</span> String[] &#123; <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span> &#125;, <span class="string">", "</span>);</div><div class="line">System.out.println(j);</div><div class="line"><span class="comment">// a, b, c</span></div></pre></td></tr></table></figure>
<h3 id="8-把ArrayList转成数组"><a href="#8-把ArrayList转成数组" class="headerlink" title="8. 把ArrayList转成数组"></a>8. 把ArrayList转成数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String[] stringArray = &#123; <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span> &#125;;</div><div class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(stringArray));</div><div class="line">String[] stringArr = <span class="keyword">new</span> String[arrayList.size()];</div><div class="line">arrayList.toArray(stringArr);</div><div class="line"><span class="keyword">for</span> (String s : stringArr)</div><div class="line">	System.out.println(s);</div></pre></td></tr></table></figure>
<h3 id="9-把数组转化成set"><a href="#9-把数组转化成set" class="headerlink" title="9. 把数组转化成set"></a>9. 把数组转化成set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String[] stringArray = &#123; <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span> &#125;;</div><div class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(stringArray));</div><div class="line">String[] stringArr = <span class="keyword">new</span> String[arrayList.size()];</div><div class="line">arrayList.toArray(stringArr);</div><div class="line"><span class="keyword">for</span> (String s : stringArr)</div><div class="line">	System.out.println(s);</div></pre></td></tr></table></figure>
<h3 id="10-逆向输出数组"><a href="#10-逆向输出数组" class="headerlink" title="10. 逆向输出数组"></a>10. 逆向输出数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</div><div class="line">ArrayUtils.reverse(intArray);</div><div class="line">System.out.println(Arrays.toString(intArray));</div><div class="line"><span class="comment">//[5, 4, 3, 2, 1]</span></div></pre></td></tr></table></figure>
<h3 id="11-删除数组中的元素"><a href="#11-删除数组中的元素" class="headerlink" title="11.删除数组中的元素"></a>11.删除数组中的元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</div><div class="line"><span class="keyword">int</span>[] removed = ArrayUtils.removeElement(intArray, <span class="number">3</span>);<span class="comment">//create a new array</span></div><div class="line">System.out.println(Arrays.toString(removed));</div></pre></td></tr></table></figure>
<h3 id="再来一个-把int数组转化成byte数组"><a href="#再来一个-把int数组转化成byte数组" class="headerlink" title="再来一个 把int数组转化成byte数组"></a>再来一个 把int数组转化成byte数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] bytes = ByteBuffer.allocate(<span class="number">4</span>).putInt(<span class="number">8</span>).array();</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">byte</span> t : bytes) &#123;</div><div class="line">   System.out.format(<span class="string">"0x%x "</span>, t);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/09/top-10-methods-for-java-arrays/" target="_blank" rel="external">Top 10 Methods for Java Arrays</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面是关于Java数组的10大方法，他们都是在stackoverflow上投票出来的。&lt;/p&gt;
&lt;h3 id=&quot;1-定义一个数组&quot;&gt;&lt;a href=&quot;#1-定义一个数组&quot; class=&quot;headerlink&quot; title=&quot;1. 定义一个数组&quot;&gt;&lt;/a&gt;1. 定义一个数组&lt;/h3&gt;&lt;p&gt;不知道为什么这个是问的最多的，难道因为最常见所以最容易忘？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String[] aArray = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String[] bArray = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String[] cArray = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java的数组在内存中是什么样的呢？</title>
    <link href="http://yoursite.com/2014/09/13/what-does-a-java-array-look-like-in-memory/"/>
    <id>http://yoursite.com/2014/09/13/what-does-a-java-array-look-like-in-memory/</id>
    <published>2014-09-13T04:33:00.000Z</published>
    <updated>2016-08-26T07:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>java中数组有2中情况：基本类型(如:int,char等等)或者引用(或者叫指针)。</p>
<p>当使用”new” 创建一个对象的时候，内存是分配在堆上同时返回一个索引。当数组是对象的时候，对于它来说也是一样的。</p>
<a id="more"></a>
<h3 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1. 一维数组"></a>1. 一维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div></pre></td></tr></table></figure>
<p>int[] 数组只是有3个整数的索引。如果你创建10个整数，它也是相同的-分配一个数组然后返回索引。</p>
<p><img src="/assets/images/one-dimension-array-in-java.png" alt=" one dimension array"></p>
<h3 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2. 二维数组"></a>2. 二维数组</h3><p>二维数组又是什么样的呢？实际上，在java中我们只能有一维数组。2D数组都是基于一维数组的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[ ][ ] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][ ];</div><div class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</div><div class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</div></pre></td></tr></table></figure>
<p><img src="/assets/images/Array-in-Memory-Java.png" alt=" Arrayin Memory"></p>
<p>多维数组使用相同的规则。</p>
<h3 id="3-在内存中他们位于何处？"><a href="#3-在内存中他们位于何处？" class="headerlink" title="3.在内存中他们位于何处？"></a>3.在内存中他们位于何处？</h3><p>在java中Arrays 和对象一样，所以一个对象在内存中如起来像什么，那么数组也一样。</p>
<p>我们知道<a href="!--￼3--">JVM Run-Time Data Areas</a>包括堆、JVM栈和别的。下面是一个简单的例子，让我们来看看数组的索引是怎么存储的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x;</div><div class="line">	<span class="keyword">int</span> y;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">...</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	m2();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">	A a = <span class="keyword">new</span> A();</div><div class="line">&#125;</div><div class="line"> </div><div class="line">...</div></pre></td></tr></table></figure>
<p>根据上面的申明，我们调用m1() 来看看发生了什么：</p>
<p>1.当m1() 调用时，一个新的帧(Frame-1)推入栈，同时Frame-1中创建了局部变量等。<br>2.然后m1中的m2()被调用，一个新的帧(Frame-2)被压入栈。在m2中，类A的一个对象在堆中被创建同时索引变量被压入Frame-2。现在在这个点，栈和堆类似如下：</p>
<p><img src="/assets/images/Java-array-in-memory.png" alt=" Array in Memory"></p>
<p>数组和对象是很像的，所以可以直截了当的定位数组在内存的分配。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/04/what-does-a-java-array-look-like-in-memory/" target="_blank" rel="external">What does a Java array look like in memory?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java中数组有2中情况：基本类型(如:int,char等等)或者引用(或者叫指针)。&lt;/p&gt;
&lt;p&gt;当使用”new” 创建一个对象的时候，内存是分配在堆上同时返回一个索引。当数组是对象的时候，对于它来说也是一样的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java中string索引传递</title>
    <link href="http://yoursite.com/2014/09/12/string-is-passed-by-reference-in-java/"/>
    <id>http://yoursite.com/2014/09/12/string-is-passed-by-reference-in-java/</id>
    <published>2014-09-12T04:33:00.000Z</published>
    <updated>2015-08-02T05:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>这是非常基础的的java问题。很多相同的问题在stackoverflow都被问，同时有很多不正确或者未完成的回答。这个问题很简单，但是你不好好想想，你会感到疑惑，使用你最好好好想想。</p>
<h3 id="1-代码片段很有趣同时也会让人疑惑"><a href="#1-代码片段很有趣同时也会让人疑惑" class="headerlink" title="1.代码片段很有趣同时也会让人疑惑"></a>1.代码片段很有趣同时也会让人疑惑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	String x = <span class="keyword">new</span> String(<span class="string">"ab"</span>);</div><div class="line">	change(x);</div><div class="line">	System.out.println(x);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String x)</span> </span>&#123;</div><div class="line">	x = <span class="string">"cd"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这将会输出<code>ab</code>。</p>
<a id="more"></a>
<p>在C++中，这代码如下:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="built_in">string</span> &amp;x)</span> </span>&#123;</div><div class="line">    x = <span class="string">"cd"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">string</span> x = <span class="string">"ab"</span>;</div><div class="line">    change(x);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是输出是<code>cd</code>。</p>
<h3 id="2-常见疑惑的问题"><a href="#2-常见疑惑的问题" class="headerlink" title="2. 常见疑惑的问题"></a>2. 常见疑惑的问题</h3><p>在堆中x存储的索引是指向字符串”ab”的。所以当x以参数传递给change()方法，在堆中它仍然指向”ab”，如下图:</p>
<p><img src="/assets/images/string-pass-by-reference--650x247.jpeg" alt=" string pass by reference"></p>
<p>因为，在java是通过值进行传递的，x的值指向”ab”。当 change()调用的时候，将会创建”cd”对象，同时x指向了”cd”。如图：</p>
<p><img src="/assets/images/string-pass-by-reference-2-650x247.jpeg" alt=" string pass by reference"></p>
<p>这看起来似乎是一个很合理的解释。java都是使用值传递，但是这错在哪了？</p>
<h3 id="3-这代码实际做什么？"><a href="#3-这代码实际做什么？" class="headerlink" title="3. 这代码实际做什么？"></a>3. 这代码实际做什么？</h3><p>上面的解释有几个错误。为了更加好明白，我们来简单走走这个过程。</p>
<p>当”ab”创建时候，java花费时间申请内存来储存对象。然后这个对象被赋予了x变量，这个变量就实际指向了这个对象。这个索引是存储这个对象内存的地址。</p>
<p>x变量包含了一个string对象的索引。x并没有自己的索引。它只是一个存储索引的变量（内存地址）。</p>
<p>java是<strong>只</strong>通过值传递的。所以当x通过change()传递的时候，拷贝了x的值(一个索引)来传递。在change()方法中创建了另外一个对象”cd”并且它有不同的索引。这时是变量x改变了它的索引(b变成了”cd”)，而不是索引自身。</p>
<p>过程可以用下图表示：</p>
<p><img src="/assets/images/string-pass-by-reference-3-650x244.jpeg" alt=" string pass by reference"></p>
<h3 id="4-错误的解释"><a href="#4-错误的解释" class="headerlink" title="4. 错误的解释"></a>4. 错误的解释</h3><p>这个问题来源于他的第一行代码使用了不可变的string。即使String换成StringBuilder，借输出结果还是一样的。最关键的是变量存储了索引，但是它没有索引自己。</p>
<h3 id="5-解决这个问题"><a href="#5-解决这个问题" class="headerlink" title="5. 解决这个问题"></a>5. 解决这个问题</h3><p>如果我们确实需要改变对象的值，首先对象是可变的，比如： StringBuilder，其次我们需要确保没有新创建对象赋予传递参数，因为java本来就是通过值传递的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	StringBuilder x = <span class="keyword">new</span> StringBuilder(<span class="string">"ab"</span>);</div><div class="line">	change(x);</div><div class="line">	System.out.println(x);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuilder x)</span> </span>&#123;</div><div class="line">	x.delete(<span class="number">0</span>, <span class="number">2</span>).append(<span class="string">"cd"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/09/string-is-passed-by-reference-in-java/" target="_blank" rel="external">String is passed by “reference” in Java</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是非常基础的的java问题。很多相同的问题在stackoverflow都被问，同时有很多不正确或者未完成的回答。这个问题很简单，但是你不好好想想，你会感到疑惑，使用你最好好好想想。&lt;/p&gt;
&lt;h3 id=&quot;1-代码片段很有趣同时也会让人疑惑&quot;&gt;&lt;a href=&quot;#1-代码片段很有趣同时也会让人疑惑&quot; class=&quot;headerlink&quot; title=&quot;1.代码片段很有趣同时也会让人疑惑&quot;&gt;&lt;/a&gt;1.代码片段很有趣同时也会让人疑惑&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	String x = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;ab&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	change(x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	System.out.println(x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	x = &lt;span class=&quot;string&quot;&gt;&quot;cd&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这将会输出&lt;code&gt;ab&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker 二进制安装</title>
    <link href="http://yoursite.com/2014/09/11/installation-binaries/"/>
    <id>http://yoursite.com/2014/09/11/installation-binaries/</id>
    <published>2014-09-11T14:10:00.000Z</published>
    <updated>2016-08-26T07:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>该部分是为了hacker准备的，如果你想在各种环境上尝试Docker的话。在安装着版本之前最好先检查一下你系统的版本是否支持包安装。我们提供了许多版本的安装包，并且都保持了更新。</p>
<a id="more"></a>
<h3 id="检查运行环境依赖"><a href="#检查运行环境依赖" class="headerlink" title="检查运行环境依赖"></a>检查运行环境依赖</h3><p>为了运行docker你必须拥有下面的软件环境：</p>
<ul>
<li>iptables 1.4及以上</li>
<li>git版本1.7及以上</li>
<li>procps (或者相同的”ps” 能执行的软件)</li>
<li>XZ Utils 4.9 及以上</li>
<li>能够正确挂载的 cgroupfs (必须是单独的，所有地方都可以挂载是不行的)</li>
</ul>
<h3 id="检查内核依赖"><a href="#检查内核依赖" class="headerlink" title="检查内核依赖"></a>检查内核依赖</h3><p>Docker守护进程模式需要特殊的内核依赖。详细请了解你的系统版本<a href="https://docs.docker.com/installation/#installation-list" target="_blank" rel="external">安装</a>。</p>
<p>总的来说，一个3.8(或者更高)内核的版本是很好的。它可以是运行在虚拟机上的或者如何linux版本（甚至是 OS X）</p>
<h4 id="获取docker的二进制"><a href="#获取docker的二进制" class="headerlink" title="获取docker的二进制:"></a>获取docker的二进制:</h4><pre><code>$ wget https://get.docker.io/builds/Linux/x86_64/docker-latest -O docker
$ chmod +x docker
</code></pre><blockquote>
<p>注意：如果你下载二进制文件比较麻烦，你也可以下载较小的压缩版本：<a href="https://get.docker.io/builds/Linux/x86_64/docker-latest.tgz" target="_blank" rel="external">https://get.docker.io/builds/Linux/x86_64/docker-latest.tgz</a>。</p>
</blockquote>
<h4 id="运行docker守护进程"><a href="#运行docker守护进程" class="headerlink" title="运行docker守护进程"></a>运行docker守护进程</h4><pre><code># 在你解压文件处运行docker的守护进程模式
$ sudo ./docker -d &amp;
</code></pre><h4 id="给与非root权限"><a href="#给与非root权限" class="headerlink" title="给与非root权限"></a>给与非root权限</h4><p>docker守护进程运行的时候总是需要root角色，同时docker守护进程绑定了一个 Unix socket 而不是一个TCP端口。默认的Unix socket 是属于root的，默认的，你可以使用sudo命令访问它。</p>
<p>如果你(或者你的docker安装程序)创建了一个用户组叫docker同时也有docker的用户，那docker守护进程启动时将属于docker用户组，同时有Unix socket read/writable权限。docker守护进程必须以root运行，但是如果你使用docker用户组的用户运行docker客户端，你需要在运行命令的时候添加sudo命令。</p>
<blockquote>
<p>警告: docker用户组(或者是-G的用户组)是和root一样的。详细请看<a href="https://docs.docker.com/articles/security/#dockersecurity-daemon" target="_blank" rel="external">Docker Daemon Attack Surface </a>。</p>
</blockquote>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>为了更新你手动安装的docker，首先需要kill掉docker的守护进程：</p>
<pre><code>$ killall docker
</code></pre><p>然后按照安装步骤进行就可以。</p>
<h3 id="运行你的第一个容器！"><a href="#运行你的第一个容器！" class="headerlink" title="运行你的第一个容器！"></a>运行你的第一个容器！</h3><pre><code># 检查你的docker版本
$ sudo ./docker version

# 运行一个容器然后在容器中打开一个交互脚本窗口
$ sudo ./docker run -i -t ubuntu /bin/bash
</code></pre><p>下一步,<a href="https://docs.docker.com/userguide/" target="_blank" rel="external">使用指导</a>。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://docs.docker.com/installation/binaries/" target="_blank" rel="external">docker installation binaries</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该部分是为了hacker准备的，如果你想在各种环境上尝试Docker的话。在安装着版本之前最好先检查一下你系统的版本是否支持包安装。我们提供了许多版本的安装包，并且都保持了更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装</title>
    <link href="http://yoursite.com/2014/09/11/install-docker/"/>
    <id>http://yoursite.com/2014/09/11/install-docker/</id>
    <published>2014-09-11T07:32:00.000Z</published>
    <updated>2016-08-26T07:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>本文主要以CentOS为例说明安装过程：</p>
<a id="more"></a>
<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><p>在 CentOS-7中Docker的相关包已经是默认提供了的。在 CentOS-6中由EPEL仓库提供。请注意两种版本的安装方式是不同的。如果你需要最新的版本，你应该使用最新的二进制文件在内核3.8及以上进行编译安装。</p>
<p>Docker是工作在CentOS6及以上版本。其他的版本或许因为EL6二进制编译分发获得，但是他们是没有经过测试的。</p>
<p>请注意由于当前Docker的限制，Docker只能运行在64位的架构上。</p>
<p>为了运行Docker你需要CentOS6或者更高版本，它的内核必须是2.6.32-431或者更高版本，因为它有Docker需要的特定补丁。</p>
<h3 id="CentOS-7-下安装Docker"><a href="#CentOS-7-下安装Docker" class="headerlink" title="CentOS 7 下安装Docker"></a>CentOS 7 下安装Docker</h3><p>因为Docker一个包含在了默认的 CentOS-Extras仓库，安装使用下面的命令就可以了</p>
<pre><code>$ sudo yum install docker
</code></pre><h4 id="手动安装最新版本"><a href="#手动安装最新版本" class="headerlink" title="手动安装最新版本"></a>手动安装最新版本</h4><p>虽然使用包安装是Docker推荐的安装方式，但是这个包有可能不是最新的版本。如果你需要最新版本的，你可以使用<a href="!--￼0--">二进制编译安装</a>。</p>
<p>当使用不带包安装二进制的时候，你可能要用systemd整合Docker。因为这样只是简单的安装了2个单元文件(service 和 socket)，安装地方 <code>/etc/systemd/system</code> <a href="https://github.com/docker/docker/tree/master/contrib/init/systemd" target="_blank" rel="external"> github 仓库</a>。</p>
<h4 id="FirewallD"><a href="#FirewallD" class="headerlink" title="FirewallD"></a>FirewallD</h4><p>CentOS-7 引入了 firewalld。大致可以理解为iptables的封装，这是可能和Docker引起冲突的。</p>
<p>当firewalld启动或者重启的时候会移除DOCKER的iptables链，导致了Docker不能正常的工作。</p>
<p>当使用systemd时，firewalld 必须在Docker启动之前启动，但是如果你启动或者重启firewalld 在Docker启动之后，你需要重启Docker的守护进程。</p>
<h3 id="CentOS-6-安装Docker"><a href="#CentOS-6-安装Docker" class="headerlink" title="CentOS-6 安装Docker"></a>CentOS-6 安装Docker</h3><p>请注意这部分安装是针对CentOS-6d1,安装包在<a href="https://fedoraproject.org/wiki/EPEL" target="_blank" rel="external"> Extra Packages for Enterprise Linux (EPEL)</a>中。它是社区版本。</p>
<p>首先你必须确保你有 EPEL repository 仓库并且可用。 请访问<a href="https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F" target="_blank" rel="external"> 安装 EPEL</a>。</p>
<blockquote>
<p>rpm -ivh <a href="http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm" target="_blank" rel="external">http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</a><br>rpm –import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</p>
</blockquote>
<p>在EPEL中已经提供了Docker的安装包docker-io。</p>
<p>如果你安装过没有发布的docker包,那可能会和docker-io引起冲突。最是发现的<a href="">bug报告</a>。为了安装docker-io，请先移除docker。</p>
<p>然后接下来安装</p>
<pre><code>$ sudo yum install docker-io
</code></pre><h3 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h3><p>一旦Docker安装完成，你需要以守护进程启动它。</p>
<pre><code>$ sudo service docker start
</code></pre><p>如果我们想开机就启动Docker，添加如下命令：</p>
<pre><code>$ sudo chkconfig docker on
</code></pre><p>好了现在我们来验证一下Docker可以正常的使用了。首先我们需要获取一个最新的centos镜像。</p>
<pre><code>$ sudo docker pull centos
</code></pre><p>下一步，我们将确保我们可以看见运行的镜像：</p>
<pre><code>$ sudo docker images centos
</code></pre><p>它会输出类似下面的结果：</p>
<pre><code>$ sudo docker images centos
REPOSITORY      TAG             IMAGE ID          CREATED             VIRTUAL SIZE
centos          latest          0b443ba03958      2 hours ago         297.6 MB
</code></pre><p>使用镜像运行一个简单的shell脚本:</p>
<pre><code>$ sudo docker run -i -t centos /bin/bash
</code></pre><p>如果一切正常，你会得到一个简单的bash提示符。输入exit继续。</p>
<h3 id="Dockerfiles"><a href="#Dockerfiles" class="headerlink" title="Dockerfiles"></a>Dockerfiles</h3><p>CentOS提供了大量的Dockerfile模板，为了方便你熟悉docker的使用。模板都放在GitHub上<a href="https://github.com/CentOS/CentOS-Dockerfiles" target="_blank" rel="external">https://github.com/CentOS/CentOS-Dockerfiles</a>。</p>
<p>一切ok！您可以继续使用<a href="">Docker 户指南</a>或自己探索创建自己的的镜像。</p>
<h3 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h3><p>如果您有任何问题 - 请直接报告给我们<a href="http://bugs.centos.org/" target="_blank" rel="external">CentOS bug跟踪</a>。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://docs.docker.com/installation/centos/" target="_blank" rel="external">docker installation at CentOS</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要以CentOS为例说明安装过程：&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>关于Docker</title>
    <link href="http://yoursite.com/2014/09/11/about-docker/"/>
    <id>http://yoursite.com/2014/09/11/about-docker/</id>
    <published>2014-09-11T04:56:00.000Z</published>
    <updated>2016-08-26T08:56:52.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>在任何地方都可以开发、部署运行任何程序</p>
<p><strong>Docker</strong>是一个为开发者和系统管理员开发、运输和运行程序的平台。Docker可以让你快速的组装程序的组件，并且消除了运行带来的额外影响。Docker可以使你的代码测试部署带生产环境更加快速。</p>
<p>Docker由一下组成：</p>
<ul>
<li>Docker 引擎 - 轻量级，开源的虚拟化容器，连接了构建和组装程序的工作流。</li>
<li><a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a> - 一个 SaaS服务，用来分享和管理你的程序脚本。</li>
</ul>
<a id="more"></a>
<h3 id="为什么使用Docker？"><a href="#为什么使用Docker？" class="headerlink" title="为什么使用Docker？"></a>为什么使用Docker？</h3><p>更加快速的分发你的程序。</p>
<ul>
<li>我们希望您的对于环境中能更好地发挥作用。Docker的容器，和他的工作流程就是这样产生的，帮助开发人员，系统管理员，质量保证，和部署工程师合理的配合工作，让你的代码投入生产，并使其有用。我们创建了一个标准的容器格式，它允许开发人员关心容器内部的应用程序，系统管理员和操作员可以在部署时候进行运行容器的工作。职责这种分离简化，简化了代码的管理和部署。</li>
<li>我们可以很容易地建立新的容器，使您的应用程序快速迭代，并增加其知名度。这有助于大家在您的组织中了解应用程序的工作原理以及它是如何构建的。</li>
<li>Docker容器是轻量级的，速度快！容器具有亚秒级的启动时间，降低了开发，测试和部署的周期。</li>
</ul>
<p>部署和扩展更加容易</p>
<ul>
<li>Docker容器可以运行在（几乎）任何处。您可以部署容器在台式机，物理服务器，虚拟机，数据中心，以及公共云和私有云。</li>
<li>由于Docker可以运行在这么多平台上，使用可以很容易地移动你的应用程序。当您需要，您可以从测试环境的应用程序轻松地移动到云和生产环境。</li>
<li>Docker的轻量级容器也使得承载更多和更快速。必要时，可以快速地推出更多的容器，当我们不再需要时候，关闭它们也很容易。</li>
</ul>
<p>获取更高密度运算和运行更多工作负载</p>
<ul>
<li>Docker容器不需要管理程序，所以你就可以装更多到你的主机。这意味着每服务器你能得到更多的价，并有可能在设备和许可证方向减少你的花费。</li>
</ul>
<p>容易管理所以使得部署更加快速</p>
<ul>
<li>由于Docker加快您的工作流程，它使得很多小的变化更加容易，而不是巨大的的更新。较小的变化意味着降低风险和更多的运行时间。</li>
</ul>
<h3 id="关于本指南"><a href="#关于本指南" class="headerlink" title="关于本指南"></a>关于本指南</h3><p><a href="https://docs.docker.com/introduction/understanding-docker/" target="_blank" rel="external">理解Docker章节</a>会帮助你</p>
<ul>
<li>较高水平的指导Docker的工作原理</li>
<li>理解Docker的架构</li>
<li>发现Docker的特性</li>
<li>知道Docker和虚拟机的不同</li>
<li>知道Docker使用地方</li>
</ul>
<h3 id="安装指导"><a href="#安装指导" class="headerlink" title="安装指导"></a>安装指导</h3><p>在<a href="https://docs.docker.com/installation/#installation" target="_blank" rel="external">安装指导</a>会帮助你在各种系统上安装Docker。</p>
<h3 id="Docker使用指导"><a href="#Docker使用指导" class="headerlink" title="Docker使用指导"></a>Docker使用指导</h3><p>学习更多的Docker细节，并且提问与回到相关使用与实现。访问<a href="https://docs.docker.com/userguide/" target="_blank" rel="external">Docker使用指导</a>。</p>
<h3 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h3><p><strong>Version 1.2.0</strong></p>
<p>该版本修复了一些bug和问题，并增加了新的功能和其他改进。这些包括：</p>
<h4 id="新的重启策略"><a href="#新的重启策略" class="headerlink" title="新的重启策略"></a>新的重启策略</h4><p>我们增加了一个<code>--restart</code>标志来重启运行指定的容器重启动。目前，有三种可用的策略：</p>
<ul>
<li><code>no</code> - 不重新启动容器，如果它死了。 （默认）</li>
<li><code>on-failure</code> - 当非零代码退出，重新启动容器。这也是可以接受的。可选最大重启次数（例如，n-failure:5）。</li>
<li><code>always</code> - 总是重新启动容器，无论返回是什么的退出代码。在Docker守护进程中，这将弃用<code>--restart</code>。</li>
</ul>
<h4 id="新的标识-docker-run-cap-add和–-cap-drop。"><a href="#新的标识-docker-run-cap-add和–-cap-drop。" class="headerlink" title="新的标识 docker run:--cap-add和–-cap-drop。"></a>新的标识 <code>docker run</code>:<code>--cap-add</code>和<code>–-cap-drop</code>。</h4><p>在以前的版本中，Docker容器既可以给出完整的功能，也可以设置白名单，而丢弃其他人。二现在，使用<code>--privileged</code>将给予所有功能的容器内，而不是应用白名单。这是不建议在生产中使用，因为它是不安全的;这就好比因你是直接放在主机上。</p>
<p>对于docker run新版本增加了2个参数, <code>--cap-add</code> 和 <code>--cap-drop</code>, 这给你了你想授予特定容器特定能力的细粒度控制。</p>
<h4 id="docker-run增加新标识-–device"><a href="#docker-run增加新标识-–device" class="headerlink" title="docker run增加新标识-–device"></a><code>docker run</code>增加新标识<code>-–device</code></h4><p>之前，你只能把设备挂载你的<code>--privileged</code>的容器(使用-v)。现在可以使用<code>--device</code>来运行Docker并不需要特定的容器的。</p>
<h4 id="可写的-etc-hosts文件-etc-hostname和-etc-resolv-conf文件"><a href="#可写的-etc-hosts文件-etc-hostname和-etc-resolv-conf文件" class="headerlink" title="可写的/etc/hosts文件,/etc/hostname和/etc/resolv.conf文件"></a>可写的/etc/hosts文件,/etc/hostname和/etc/resolv.conf文件</h4><p>现在你能编辑/etc/hosts文件,/etc/hostname和/etc/resolv.conf文件，在容器运行的时候。这非常有用，如果你需要绑定别的服务，来覆盖的话。</p>
<p>注意，这些修改文件，如果不保存，那么docker build的时候是没有效果的。这改变只会在运行的容器中产生效果。</p>
<h4 id="在一个单独的程序运行Docker代理。"><a href="#在一个单独的程序运行Docker代理。" class="headerlink" title="在一个单独的程序运行Docker代理。"></a>在一个单独的程序运行Docker代理。</h4><p>Docker的使用的代理将是对外的容器，它有自己单独的进程（每个连接一个进程）。这大大降低了守护程序的加载，从而增加了稳定性、效率和负载。</p>
<h4 id="其他改进和变化"><a href="#其他改进和变化" class="headerlink" title="其他改进和变化"></a>其他改进和变化</h4><ul>
<li>当使用<code>docker rm -</code>时候，Docker现在会在移除之前kill掉容器（不是原来的停止）。如果你想先停止，你应该适应docker stop。</li>
<li>增加 IPv6的支持，使用<code>--dns</code>。</li>
<li>在私人注册中加入了搜索功能。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://docs.docker.com/#installation-guides" target="_blank" rel="external">关于docker</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在任何地方都可以开发、部署运行任何程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;是一个为开发者和系统管理员开发、运输和运行程序的平台。Docker可以让你快速的组装程序的组件，并且消除了运行带来的额外影响。Docker可以使你的代码测试部署带生产环境更加快速。&lt;/p&gt;
&lt;p&gt;Docker由一下组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 引擎 - 轻量级，开源的虚拟化容器，连接了构建和组装程序的工作流。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt; - 一个 SaaS服务，用来分享和管理你的程序脚本。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>JVM Run-Time Data Areas</title>
    <link href="http://yoursite.com/2014/09/10/jvm-run-time-data-areas/"/>
    <id>http://yoursite.com/2014/09/10/jvm-run-time-data-areas/</id>
    <published>2014-09-10T04:33:00.000Z</published>
    <updated>2015-08-02T05:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>这是阅读JVM规范的笔记。我画了一幅图，它能帮我更好的理解JVM。</p>
<p><img src="/assets/images/JVM-runtime-data-area.jpg" alt=" JVM "></p>
<a id="more"></a>
<h3 id="1-每个单独线程的数据区（不共享）"><a href="#1-每个单独线程的数据区（不共享）" class="headerlink" title="1.每个单独线程的数据区（不共享）"></a>1.每个单独线程的数据区（不共享）</h3><p>每个线程的数据区包括程序计数器、JVM栈和本地方法栈。他们都是在线程创建的时候创建的。</p>
<p>程序计数器：它是用来控制每个线程的执行的。</p>
<p>JVM 栈: Stack里存放的是Frame(帧)（如下图所示）。　</p>
<p>Native Method Stack(本地方法栈):　用来支持native methods (非Java语言method)。　</p>
<h3 id="所有的线程共享数据区"><a href="#所有的线程共享数据区" class="headerlink" title="所有的线程共享数据区"></a>所有的线程共享数据区</h3><p>所有的线程共享数据区有Heap和Method Area.</p>
<p>Heap(堆)是与我们平时编程最直接打交道的区域。它存放所有的对象和数组。在JVM启动时划分生成。常说的Garbage Collector垃圾回收器就是对这个区域工作的。　</p>
<p>Method Area(方法区)存储类的结构信息，包括 run-time constant pool, field and method data, 和methods and constructors代码。　</p>
<p>Runtime Constant Pool（运行时常量池）存放编译时可知的数值字面量和运行期解析后才能获得的method或field的引用。</p>
<p><img src="/assets/images/JVM-Stack.png" alt=" JVM "></p>
<p>Stack中的包含一些Frame, 这些Frame在method调动的时候生成。每一个Frame包括：local variable array, Operand Stack, Reference to Constant Pool.</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/04/jvm-run-time-data-areas/" target="_blank" rel="external">JVM Run-Time Data Areas</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是阅读JVM规范的笔记。我画了一幅图，它能帮我更好的理解JVM。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/JVM-runtime-data-area.jpg&quot; alt=&quot; JVM &quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java字符串的十大问题</title>
    <link href="http://yoursite.com/2014/09/08/top-10-faqs-of-java-strings/"/>
    <id>http://yoursite.com/2014/09/08/top-10-faqs-of-java-strings/</id>
    <published>2014-09-08T04:45:00.000Z</published>
    <updated>2015-08-02T05:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>以下是排名前10位的常见关于Java字符串的问题。</p>
<h3 id="1-如何比较字符串？用”-”-还是equals-？"><a href="#1-如何比较字符串？用”-”-还是equals-？" class="headerlink" title="1.如何比较字符串？用”==” 还是equals()？"></a>1.如何比较字符串？用”==” 还是equals()？</h3><p>简单来说，如果”==”测试是相等的，那么使用 equals()也是相等的。如果你想知道这两个对象是不是相同，你应该使用equals()。</p>
<p>如果你知道<a href="!--￼7--">string interning</a>那会让你更好理解。</p>
<h3 id="2-在安全敏感信息方面为什么-char-优于字符串"><a href="#2-在安全敏感信息方面为什么-char-优于字符串" class="headerlink" title="2.在安全敏感信息方面为什么 char[] 优于字符串?"></a>2.在安全敏感信息方面为什么 char[] 优于字符串?</h3><p>字符串是不可变的，这意味着一旦被创建，他们将保持不变，直到垃圾回收。但是数组话，你可以明确地改变它的元素。以这种方式，安全敏感信息（如密码）将不存在于系统中的任何地方。</p>
<a id="more"></a>
<h3 id="3-可以使用string的switch-语法吗？"><a href="#3-可以使用string的switch-语法吗？" class="headerlink" title="3.可以使用string的switch 语法吗？"></a>3.可以使用string的switch 语法吗？</h3><p>JDK7可以。从JDK 7中，我们可以使用字符串作为switch的条件。 JDK6版本(包括6)之前，我们不能使用字符串作为switch的条件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java 7 only!</span></div><div class="line"><span class="keyword">switch</span> (str.toLowerCase()) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">"a"</span>:</div><div class="line">           value = <span class="number">1</span>;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">           value = <span class="number">2</span>;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-怎么把字符串转换成整形"><a href="#4-怎么把字符串转换成整形" class="headerlink" title="4.怎么把字符串转换成整形"></a>4.怎么把字符串转换成整形</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = Integer.parseInt(<span class="string">"10"</span>);</div></pre></td></tr></table></figure>
<p>简单，如此频繁的使用，但是有时会被忽略。</p>
<h3 id="5-怎么用空白来拆分字符串"><a href="#5-怎么用空白来拆分字符串" class="headerlink" title="5.怎么用空白来拆分字符串"></a>5.怎么用空白来拆分字符串</h3><p>我们可以使用正则表达式简单做分割。”\s”代表空格字符如”” “, “\t”, “\r”, “\n”。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String[] strArray = aString.split(<span class="string">"\\s+"</span>);</div></pre></td></tr></table></figure>
<h3 id="6-substring-实际做了什么？"><a href="#6-substring-实际做了什么？" class="headerlink" title="6.substring() 实际做了什么？"></a>6.substring() 实际做了什么？</h3><p>在JDK6中，substring()方法提供了一个窗口给字符数组，它代表着现有的字符串，但不创建一个新的。要创建一个新的字符数组代表一个新的字符串，你可以做添加类似下面的一个空字符串：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.substring(m, n) + <span class="string">""</span></div></pre></td></tr></table></figure>
<p>这将创建一个新的字符数组，用来表示新的字符串。上述方法有时可以使你的代码更加快速，因为垃圾收集器收集未使用的大串，只保留了子字符串。 </p>
<p>在Oracle的JDK7中，substring()创建一个新的字符数组，而不是使用现有的。<a href="!--￼8--">JDK6和JDK7的substring()的区别</a>。</p>
<h3 id="7-String-vs-StringBuilder-vs-StringBuffer"><a href="#7-String-vs-StringBuilder-vs-StringBuffer" class="headerlink" title="7.String vs StringBuilder vs StringBuffer"></a>7.String vs StringBuilder vs StringBuffer</h3><p>String vs StringBuilder: StringBuilder是可变的，这意味着你可以在创建后修改。<br>StringBuilder vs StringBuffer: StringBuffer是同步的，这意味着它是线程安全的，但是比StringBuilder的慢。</p>
<h3 id="8-怎么重复一个字符串"><a href="#8-怎么重复一个字符串" class="headerlink" title="8.怎么重复一个字符串?"></a>8.怎么重复一个字符串?</h3><p>在Python中，我们可以只乘了一个重复的数字就可以替换字符串。在Java中，我们可以使用来自Apache Commons Lang包中的StringUtils的repeat()方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"abcd"</span>;</div><div class="line">String repeated = StringUtils.repeat(str,<span class="number">3</span>);</div><div class="line"><span class="comment">//abcdabcdabcd</span></div></pre></td></tr></table></figure>
<h3 id="9-怎么把一个字符串转换成date"><a href="#9-怎么把一个字符串转换成date" class="headerlink" title="9.怎么把一个字符串转换成date"></a>9.怎么把一个字符串转换成date</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Sep 17, 2013"</span>;</div><div class="line">Date date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"MMMM d, yy"</span>, Locale.ENGLISH).parse(str);</div><div class="line">System.out.println(date);</div><div class="line"><span class="comment">//Tue Sep 17 00:00:00 EDT 2013</span></div></pre></td></tr></table></figure>
<h3 id="10-怎么计算字符串中出现-的次数"><a href="#10-怎么计算字符串中出现-的次数" class="headerlink" title="10. 怎么计算字符串中出现#的次数"></a>10. 怎么计算字符串中出现#的次数</h3><p>可以使用来自Apache Commons Lang包中的StringUtils的countMatches()方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = StringUtils.countMatches(<span class="string">"11112222"</span>, <span class="string">"1"</span>);</div><div class="line">System.out.println(n);</div><div class="line"><span class="comment">//4</span></div></pre></td></tr></table></figure>
<h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p>你知道(<a href="http://www.programcreek.com/2011/04/a-method-to-detect-if-string-contains-1-uppercase-letter-in-java/)[如何检测字符串只包含大写字母吗]？" target="_blank" rel="external">http://www.programcreek.com/2011/04/a-method-to-detect-if-string-contains-1-uppercase-letter-in-java/)[如何检测字符串只包含大写字母吗]？</a></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2013/09/top-10-faqs-of-java-strings/" target="_blank" rel="external">top 10 faqs of java strings</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下是排名前10位的常见关于Java字符串的问题。&lt;/p&gt;
&lt;h3 id=&quot;1-如何比较字符串？用”-”-还是equals-？&quot;&gt;&lt;a href=&quot;#1-如何比较字符串？用”-”-还是equals-？&quot; class=&quot;headerlink&quot; title=&quot;1.如何比较字符串？用”==” 还是equals()？&quot;&gt;&lt;/a&gt;1.如何比较字符串？用”==” 还是equals()？&lt;/h3&gt;&lt;p&gt;简单来说，如果”==”测试是相等的，那么使用 equals()也是相等的。如果你想知道这两个对象是不是相同，你应该使用equals()。&lt;/p&gt;
&lt;p&gt;如果你知道&lt;a href=&quot;!--￼7--&quot;&gt;string interning&lt;/a&gt;那会让你更好理解。&lt;/p&gt;
&lt;h3 id=&quot;2-在安全敏感信息方面为什么-char-优于字符串&quot;&gt;&lt;a href=&quot;#2-在安全敏感信息方面为什么-char-优于字符串&quot; class=&quot;headerlink&quot; title=&quot;2.在安全敏感信息方面为什么 char[] 优于字符串?&quot;&gt;&lt;/a&gt;2.在安全敏感信息方面为什么 char[] 优于字符串?&lt;/h3&gt;&lt;p&gt;字符串是不可变的，这意味着一旦被创建，他们将保持不变，直到垃圾回收。但是数组话，你可以明确地改变它的元素。以这种方式，安全敏感信息（如密码）将不存在于系统中的任何地方。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java开发者常犯的问题</title>
    <link href="http://yoursite.com/2014/09/06/top-10-mistakes-java-developers-make/"/>
    <id>http://yoursite.com/2014/09/06/top-10-mistakes-java-developers-make/</id>
    <published>2014-09-06T05:22:00.000Z</published>
    <updated>2015-08-02T05:56:15.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>该文总结了排名前10位的错误，这些都是Java开发人员经常犯的。</p>
<h3 id="1-把数组转成ArrayList"><a href="#1-把数组转成ArrayList" class="headerlink" title="1.把数组转成ArrayList"></a>1.把数组转成ArrayList</h3><p>把数组转成ArrayList，开发者通常这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</div><div class="line">List&lt;String&gt; list = Arrays.asList(arr);</div><div class="line">System.out.println(list);</div><div class="line"><span class="comment">// [a, b, c]</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Arrays.asList()将会返回一个ArrayList 它是一个private static class在Arrays中，并非java.util.ArrayList类。java.util.Arrays.ArrayList类有set(), get(), contains()等方法，但是没有任何添加元素的方法，所以它的大小是固定的。看下面这个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</div><div class="line">List&lt;String&gt; list = Arrays.asList(arr);</div><div class="line">System.out.println(list);</div><div class="line">list.add(<span class="string">"d"</span>);<span class="comment">//java.lang.UnsupportedOperationException</span></div></pre></td></tr></table></figure>
<p>为了创建一个实际的ArrayList，你应该这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</div><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(arr));</div><div class="line">System.out.println(list);<span class="comment">//[a, b, c]</span></div><div class="line">list.add(<span class="string">"d"</span>);</div><div class="line">System.out.println(list);<span class="comment">//[a, b, c, d]</span></div></pre></td></tr></table></figure>
<p>ArrayList的构造函数可以接受一个集合类型，这包括了超类是java.util.Arrays.ArrayList的类。</p>
<h3 id="2-检查一个集合中是否有一个值"><a href="#2-检查一个集合中是否有一个值" class="headerlink" title="2.检查一个集合中是否有一个值"></a>2.检查一个集合中是否有一个值</h3><p>开发者通常这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(arr));</div><div class="line"><span class="keyword">return</span> set.contains(targetValue);</div></pre></td></tr></table></figure>
<p>这代码可以达到效果，但是在这里list根本没有必要转换成set。转换list成为set也是要花费时间的。使用下面代码就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.asList(arr).contains(targetValue);</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(String s: arr)&#123;</div><div class="line">	<span class="keyword">if</span>(s.equals(targetValue))</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div></pre></td></tr></table></figure>
<p>第一个可读性比第二个好很多。</p>
<h3 id="3-从list中循环删除元素"><a href="#3-从list中循环删除元素" class="headerlink" title="3.从list中循环删除元素"></a>3.从list中循环删除元素</h3><p>考虑一下下面的代码，在迭代过程中删除元素：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</div><div class="line">	list.remove(i);</div><div class="line">&#125;</div><div class="line">System.out.println(list);<span class="comment">//[b, d]</span></div></pre></td></tr></table></figure>
<p>该方法存在一个严重的问题。当一个元素被移除时，该列表的大小减小，而index数的却是变化的。所以，如果你想通过使用索引来删除一个循环中的多个元素，那将是无法正常工作。</p>
<p>你可能知道，使用迭代器是正确的方式来删除循环中的元素，你知道foreach循环中的Java就像一个迭代器，但实际上它不是。考虑下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (String s : list) &#123;</div><div class="line">	<span class="keyword">if</span> (s.equals(<span class="string">"a"</span>))</div><div class="line">		list.remove(s); <span class="comment">//ConcurrentModificationException.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它会抛出<a href="!--￼14--">ConcurrentModificationException</a>异常。</p>
<p>使用下面方法可以解决：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</div><div class="line">Iterator&lt;String&gt; iter = list.iterator();</div><div class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">	String s = iter.next();</div><div class="line"> </div><div class="line">	<span class="keyword">if</span> (s.equals(<span class="string">"a"</span>)) &#123;</div><div class="line">		iter.remove();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>.next() 必须在 .remove()之前调用。在foreach循环中，编译器调用.next() 在.remove()元素之后​​，这引起了ConcurrentModificationException异常。你最好看看 <a href="!--￼15--">ArrayList.iterator() 源码深度理解</a>，这将有助于你的理解。</p>
<h3 id="4-Hashtable-vs-HashMap"><a href="#4-Hashtable-vs-HashMap" class="headerlink" title="4. Hashtable vs HashMap"></a>4. Hashtable vs HashMap</h3><p>通常，在算法中Hashtable是一种数据结构的名称。但是在java中这种数据结构的名称是HashMap。最主要的一个不同是Hashtable是同步的。所以很多时候你是不需要使用Hashtable的，通常使用HashMap。</p>
<ul>
<li><a href="!--￼16--">HashMap vs. TreeMap vs. Hashtable vs. LinkedHashMap</a></li>
<li><a href="!--￼17--">关于Java Maps的9个常见问题</a></li>
</ul>
<h3 id="5-在集合中使用原始类型"><a href="#5-在集合中使用原始类型" class="headerlink" title="5. 在集合中使用原始类型"></a>5. 在集合中使用原始类型</h3><p>在java中，原始类型和无界通配符类型很容易混合在一起。用set来举个例子，Set是原始类型，当设置<code>Set&lt;?&gt;</code>是无界通配符类型的时候。</p>
<p>考虑下面的代码，它使用原始类型列表作为参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List list, Object o)</span></span>&#123;</div><div class="line">	list.add(o);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	add(list, <span class="number">10</span>);</div><div class="line">	String s = list.get(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此代码将抛出一个异常：</p>
<pre><code>Exception in thread &quot;main&quot; java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String
at ...
</code></pre><p>使用原始类型的集合是很危险的，因为在原始类型的集合中跳过了泛型类型的检查，这样是不是安全的。对于<code>Set</code>, <code>Set&lt;?&gt;</code>, 和 <code>Set&lt;Object&gt;</code>是有很多不同的。<a href="!--￼18--">Set vs. Set&lt;?&gt;</a>和<a href="!--￼19--">Java Type Erasure Mechanism</a></p>
<h3 id="6-访问级别"><a href="#6-访问级别" class="headerlink" title="6. 访问级别"></a>6. 访问级别</h3><p>很多时候开发人员会使用public的字段级别。这很容易通过引用来获得字段的值，但是这是一个很糟糕的设计。经验法则是会给成员尽可能低的访问级别。</p>
<p><a href="!--￼20--">Java 访问级别: public, protected, private</a></p>
<h3 id="7-rrayList-vs-LinkedList"><a href="#7-rrayList-vs-LinkedList" class="headerlink" title="7. rrayList vs. LinkedList"></a>7. rrayList vs. LinkedList</h3><p>当开发者不知道ArrayList 和 LinkedList的区别的时候，他们通常使用ArrayList，因为ArrayList看起来更加熟悉。然而，这直接将是一个很严重的性能问题。通常来说，LinkedList应该是首选的情况是，如果有大量的添加/删除操作和没有大量的随机访问操作。如果这对你有用的话，访问<a href="!--￼21--">ArrayList vs. LinkedList</a>获得有关他们的性能的详细信息。</p>
<h3 id="8-可变与不可变（Mutable-vs-Immutable）"><a href="#8-可变与不可变（Mutable-vs-Immutable）" class="headerlink" title="8. 可变与不可变（Mutable vs. Immutable）"></a>8. 可变与不可变（Mutable vs. Immutable）</h3><p>不可改变的对象有许多优点，例如简单性，安全性等，但它需要对每个不同的值穿件一个单独的对象，对象太多可能导致无用GC，成本过高。可变和不可变之间进行选择时应该有一个平衡点。</p>
<p>在一般情况下，使用可变对象，以避免产生过多的中间对象。一个典型的例子是连接大量的字符串。如果您使用的是不可变的字符串，你会产生很多有资格立即垃圾回收的对象。这浪费时间和精力在CPU上，使用可变对象来解决这个问题（如StringBuilder）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String result=<span class="string">""</span>;</div><div class="line"><span class="keyword">for</span>(String s: arr)&#123;</div><div class="line">	result = result + s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有，可变对象在一些情况也是是可取的。例如通过可变对象的方法，可以让你收集多个结果，而无需通过太多的语法钻圈。另一个例子是排序和筛选：当然，你可以做一个方法，它传入原来的集合，返回一个新的有序的集合，但在大集合中会变得极其浪费空间。（来自<a href="http://stackoverflow.com/questions/23616211/why-we-need-mutable-classes" target="_blank" rel="external">dasblinkenlight在Stack Overflow的回答</a>）</p>
<p><a href="!--￼22--">在java中为什么字符串是不可变的</a></p>
<h3 id="9-超类和子类的构造函数"><a href="#9-超类和子类的构造函数" class="headerlink" title="9. 超类和子类的构造函数"></a>9. 超类和子类的构造函数</h3><p><img src="/assets/images/Implicit-super-constructor-is-undefined-for-default-constructor.png" alt="超类和子类构造函数"></p>
<p>发生这种编译错误，是因为默认的超级构造函数是不确定的。在Java中，如果一个类没有定义构造函数，编译器会插入一个默认的无参数构造函数。如果构造函数是在超类中定义的，在Super(String s)情况下，编译器将不插入默认的无参数构造函数。Super 类就是以上的情况。</p>
<p>Sub类中的构造函数，无论是带参数还是不带参数，都需要调用 Super 类的无参构造函数。但Super类的默认构造函数是没有定义的，使用编译器报告了这个错误信息。</p>
<p>要解决此问题，只需在 Super中增加一个Super()构造函数，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"Super"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或删除自定义的Super构造函数，或增加 super(value)在sub类的构造方法中。</p>
<p><a href="!--￼23--">在java中子类与父类的构造函数</a></p>
<h3 id="10-“”-还是构造函数"><a href="#10-“”-还是构造函数" class="headerlink" title="10. “” 还是构造函数?"></a>10. “” 还是构造函数?</h3><p>String 能通过两种方式创建:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. use double quotes</span></div><div class="line">String x = <span class="string">"abc"</span>;</div><div class="line"><span class="comment">//2. use constructor</span></div><div class="line">String y = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div></pre></td></tr></table></figure>
<p>那他们有什么不同？</p>
<p>下面的例子可以提供一个快速的答案：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String a = <span class="string">"abcd"</span>;</div><div class="line">String b = <span class="string">"abcd"</span>;</div><div class="line">System.out.println(a == b);  <span class="comment">// True</span></div><div class="line">System.out.println(a.equals(b)); <span class="comment">// True</span></div><div class="line"> </div><div class="line">String c = <span class="keyword">new</span> String(<span class="string">"abcd"</span>);</div><div class="line">String d = <span class="keyword">new</span> String(<span class="string">"abcd"</span>);</div><div class="line">System.out.println(c == d);  <span class="comment">// False</span></div><div class="line">System.out.println(c.equals(d)); <span class="comment">// True</span></div></pre></td></tr></table></figure>
<p>关于它们是如何分配的内存的详细信息,请看<a href="!--￼24--">java中创建字符串使用”” 或者 构造函数?</a></p>
<h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p>这份名单是根据我对大量在GitHub上、Stack Overflow问题和流行的Google查询分析。没有评估，难以证明他们恰恰是前10名，但绝他们对是很常见的。请留下您的评论，如果你有不同的意见。如果你能指出一些错误是十分常见的，我将会十分感激。</p>
<ul>
<li><a href="http://www.programcreek.com/2013/04/what-are-the-frequently-asked-questions-about-constructors-in-java/" target="_blank" rel="external">Constructors of Sub and Super Classes in Java?</a></li>
<li><a href="http://www.programcreek.com/2014/03/how-developers-sort-in-java/" target="_blank" rel="external">How Developers Sort in Java?</a></li>
<li><a href="http://www.programcreek.com/2013/04/how-to-convert-array-to-arraylist-in-java/" target="_blank" rel="external">How to Convert Array to ArrayList in Java?</a></li>
<li><a href="http://www.programcreek.com/2011/12/java-type-erasure-mechanism-example/" target="_blank" rel="external">Java Type Erasure Mechanism</a></li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2014/05/top-10-mistakes-java-developers-make/" target="_blank" rel="external">Top 10 Mistakes Java Developers Make</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该文总结了排名前10位的错误，这些都是Java开发人员经常犯的。&lt;/p&gt;
&lt;h3 id=&quot;1-把数组转成ArrayList&quot;&gt;&lt;a href=&quot;#1-把数组转成ArrayList&quot; class=&quot;headerlink&quot; title=&quot;1.把数组转成ArrayList&quot;&gt;&lt;/a&gt;1.把数组转成ArrayList&lt;/h3&gt;&lt;p&gt;把数组转成ArrayList，开发者通常这样做：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String[] arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(arr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(list);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [a, b, c]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList.iterator()的深刻理解</title>
    <link href="http://yoursite.com/2014/09/05/deep-understanding-of-arraylist-iterator/"/>
    <id>http://yoursite.com/2014/09/05/deep-understanding-of-arraylist-iterator/</id>
    <published>2014-09-05T05:45:00.000Z</published>
    <updated>2015-08-02T05:54:40.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>迭代器经常会出现问题，因为开发人员往往不知道它是如何工作的。下面的代码来源是ArrayList的源码：</p>
<p>最常见的问题是抛出<a href="!--￼1--">java.util.ConcurrentModificationException</a>异常。这异常实际通常是由remove方法抛出。当remove()调用是应该在 next()调用之后调用。如果remove()在next()调用之前调用，arraylist 的容量改变了，modCount != expectedModCount条件不满足，ConcurrentModificationException 异常就产生了。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * An optimized version of AbstractList.Itr</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></div><div class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></div><div class="line">    <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cursor != size;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        checkForComodification();</div><div class="line">        <span class="keyword">int</span> i = cursor;</div><div class="line">        <span class="keyword">if</span> (i &gt;= size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        cursor = i + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        checkForComodification();</div><div class="line"> </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">            cursor = lastRet;</div><div class="line">            lastRet = -<span class="number">1</span>;</div><div class="line">            expectedModCount = modCount;</div><div class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.programcreek.com/2014/01/deep-understanding-of-arraylist-iterator/" target="_blank" rel="external">Deep Understanding of ArrayList.iterator()</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迭代器经常会出现问题，因为开发人员往往不知道它是如何工作的。下面的代码来源是ArrayList的源码：&lt;/p&gt;
&lt;p&gt;最常见的问题是抛出&lt;a href=&quot;!--￼1--&quot;&gt;java.util.ConcurrentModificationException&lt;/a&gt;异常。这异常实际通常是由remove方法抛出。当remove()调用是应该在 next()调用之后调用。如果remove()在next()调用之前调用，arraylist 的容量改变了，modCount != expectedModCount条件不满足，ConcurrentModificationException 异常就产生了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
